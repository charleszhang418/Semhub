{
    "repo_name": "flask",
    "owner_type": "organization",
    "owner": "pallets",

    "errors":[
       {
          "code":3,
          "level":"warn",
          "message":"Syntax error at line /tmp/b7e98c65-5d2f-4fba-9d06-485708620d5c/.github/workflows/tests.yaml:58:\n When parsing a snippet as Bash for metavariable-pattern in rule 'yaml.github-actions.security.curl-eval.curl-eval', `${{` was unexpected",
          "path":"/tmp/b7e98c65-5d2f-4fba-9d06-485708620d5c/.github/workflows/tests.yaml",
          "spans":[
             {
                "end":{
                   "col":28,
                   "line":58
                },
                "file":"/tmp/b7e98c65-5d2f-4fba-9d06-485708620d5c/.github/workflows/tests.yaml",
                "start":{
                   "col":25,
                   "line":58
                }
             }
          ],
          "type":"Syntax error"
       },
       {
          "code":3,
          "level":"warn",
          "message":"Syntax error at line /tmp/b7e98c65-5d2f-4fba-9d06-485708620d5c/.github/workflows/publish.yaml:49:\n When parsing a snippet as Bash for metavariable-pattern in rule 'yaml.github-actions.security.curl-eval.curl-eval', `${{` was unexpected",
          "path":"/tmp/b7e98c65-5d2f-4fba-9d06-485708620d5c/.github/workflows/publish.yaml",
          "spans":[
             {
                "end":{
                   "col":50,
                   "line":49
                },
                "file":"/tmp/b7e98c65-5d2f-4fba-9d06-485708620d5c/.github/workflows/publish.yaml",
                "start":{
                   "col":47,
                   "line":49
                }
             },
             {
                "end":{
                   "col":75,
                   "line":49
                },
                "file":"/tmp/b7e98c65-5d2f-4fba-9d06-485708620d5c/.github/workflows/publish.yaml",
                "start":{
                   "col":72,
                   "line":49
                }
             }
          ],
          "type":"Syntax error"
       }
    ],
    "paths":{
       "_comment":"<add --verbose for a list of skipped paths>",
       "scanned":[
          "/tmp/b7e98c65-5d2f-4fba-9d06-485708620d5c/.editorconfig",
          "/tmp/b7e98c65-5d2f-4fba-9d06-485708620d5c/.flake8",
          "/tmp/b7e98c65-5d2f-4fba-9d06-485708620d5c/.github/ISSUE_TEMPLATE/bug-report.md",
          "/tmp/b7e98c65-5d2f-4fba-9d06-485708620d5c/.github/ISSUE_TEMPLATE/config.yml",
          "/tmp/b7e98c65-5d2f-4fba-9d06-485708620d5c/.github/ISSUE_TEMPLATE/feature-request.md",
          "/tmp/b7e98c65-5d2f-4fba-9d06-485708620d5c/.github/SECURITY.md",
          "/tmp/b7e98c65-5d2f-4fba-9d06-485708620d5c/.github/dependabot.yml",
          "/tmp/b7e98c65-5d2f-4fba-9d06-485708620d5c/.github/pull_request_template.md",
          "/tmp/b7e98c65-5d2f-4fba-9d06-485708620d5c/.github/workflows/lock.yaml",
          "/tmp/b7e98c65-5d2f-4fba-9d06-485708620d5c/.github/workflows/publish.yaml",
          "/tmp/b7e98c65-5d2f-4fba-9d06-485708620d5c/.github/workflows/tests.yaml",
          "/tmp/b7e98c65-5d2f-4fba-9d06-485708620d5c/.gitignore",
          "/tmp/b7e98c65-5d2f-4fba-9d06-485708620d5c/.pre-commit-config.yaml",
          "/tmp/b7e98c65-5d2f-4fba-9d06-485708620d5c/.readthedocs.yaml",
          "/tmp/b7e98c65-5d2f-4fba-9d06-485708620d5c/CHANGES.rst",
          "/tmp/b7e98c65-5d2f-4fba-9d06-485708620d5c/CODE_OF_CONDUCT.md",
          "/tmp/b7e98c65-5d2f-4fba-9d06-485708620d5c/CONTRIBUTING.rst",
          "/tmp/b7e98c65-5d2f-4fba-9d06-485708620d5c/LICENSE.rst",
          "/tmp/b7e98c65-5d2f-4fba-9d06-485708620d5c/MANIFEST.in",
          "/tmp/b7e98c65-5d2f-4fba-9d06-485708620d5c/README.rst",
          "/tmp/b7e98c65-5d2f-4fba-9d06-485708620d5c/artwork/LICENSE.rst",
          "/tmp/b7e98c65-5d2f-4fba-9d06-485708620d5c/artwork/logo-full.svg",
          "/tmp/b7e98c65-5d2f-4fba-9d06-485708620d5c/artwork/logo-lineart.svg",
          "/tmp/b7e98c65-5d2f-4fba-9d06-485708620d5c/docs/Makefile",
          "/tmp/b7e98c65-5d2f-4fba-9d06-485708620d5c/docs/_static/debugger.png",
          "/tmp/b7e98c65-5d2f-4fba-9d06-485708620d5c/docs/_static/flask-icon.png",
          "/tmp/b7e98c65-5d2f-4fba-9d06-485708620d5c/docs/_static/flask-logo.png",
          "/tmp/b7e98c65-5d2f-4fba-9d06-485708620d5c/docs/_static/no.png",
          "/tmp/b7e98c65-5d2f-4fba-9d06-485708620d5c/docs/_static/pycharm-run-config.png",
          "/tmp/b7e98c65-5d2f-4fba-9d06-485708620d5c/docs/_static/yes.png",
          "/tmp/b7e98c65-5d2f-4fba-9d06-485708620d5c/docs/api.rst",
          "/tmp/b7e98c65-5d2f-4fba-9d06-485708620d5c/docs/appcontext.rst",
          "/tmp/b7e98c65-5d2f-4fba-9d06-485708620d5c/docs/async-await.rst",
          "/tmp/b7e98c65-5d2f-4fba-9d06-485708620d5c/docs/blueprints.rst",
          "/tmp/b7e98c65-5d2f-4fba-9d06-485708620d5c/docs/changes.rst",
          "/tmp/b7e98c65-5d2f-4fba-9d06-485708620d5c/docs/cli.rst",
          "/tmp/b7e98c65-5d2f-4fba-9d06-485708620d5c/docs/conf.py",
          "/tmp/b7e98c65-5d2f-4fba-9d06-485708620d5c/docs/config.rst",
          "/tmp/b7e98c65-5d2f-4fba-9d06-485708620d5c/docs/contributing.rst",
          "/tmp/b7e98c65-5d2f-4fba-9d06-485708620d5c/docs/debugging.rst",
          "/tmp/b7e98c65-5d2f-4fba-9d06-485708620d5c/docs/deploying/apache-httpd.rst",
          "/tmp/b7e98c65-5d2f-4fba-9d06-485708620d5c/docs/deploying/asgi.rst",
          "/tmp/b7e98c65-5d2f-4fba-9d06-485708620d5c/docs/deploying/eventlet.rst",
          "/tmp/b7e98c65-5d2f-4fba-9d06-485708620d5c/docs/deploying/gevent.rst",
          "/tmp/b7e98c65-5d2f-4fba-9d06-485708620d5c/docs/deploying/gunicorn.rst",
          "/tmp/b7e98c65-5d2f-4fba-9d06-485708620d5c/docs/deploying/index.rst",
          "/tmp/b7e98c65-5d2f-4fba-9d06-485708620d5c/docs/deploying/mod_wsgi.rst",
          "/tmp/b7e98c65-5d2f-4fba-9d06-485708620d5c/docs/deploying/nginx.rst",
          "/tmp/b7e98c65-5d2f-4fba-9d06-485708620d5c/docs/deploying/proxy_fix.rst",
          "/tmp/b7e98c65-5d2f-4fba-9d06-485708620d5c/docs/deploying/uwsgi.rst",
          "/tmp/b7e98c65-5d2f-4fba-9d06-485708620d5c/docs/deploying/waitress.rst",
          "/tmp/b7e98c65-5d2f-4fba-9d06-485708620d5c/docs/design.rst",
          "/tmp/b7e98c65-5d2f-4fba-9d06-485708620d5c/docs/errorhandling.rst",
          "/tmp/b7e98c65-5d2f-4fba-9d06-485708620d5c/docs/extensiondev.rst",
          "/tmp/b7e98c65-5d2f-4fba-9d06-485708620d5c/docs/extensions.rst",
          "/tmp/b7e98c65-5d2f-4fba-9d06-485708620d5c/docs/index.rst",
          "/tmp/b7e98c65-5d2f-4fba-9d06-485708620d5c/docs/installation.rst",
          "/tmp/b7e98c65-5d2f-4fba-9d06-485708620d5c/docs/license.rst",
          "/tmp/b7e98c65-5d2f-4fba-9d06-485708620d5c/docs/lifecycle.rst",
          "/tmp/b7e98c65-5d2f-4fba-9d06-485708620d5c/docs/logging.rst",
          "/tmp/b7e98c65-5d2f-4fba-9d06-485708620d5c/docs/make.bat",
          "/tmp/b7e98c65-5d2f-4fba-9d06-485708620d5c/docs/patterns/appdispatch.rst",
          "/tmp/b7e98c65-5d2f-4fba-9d06-485708620d5c/docs/patterns/appfactories.rst",
          "/tmp/b7e98c65-5d2f-4fba-9d06-485708620d5c/docs/patterns/caching.rst",
          "/tmp/b7e98c65-5d2f-4fba-9d06-485708620d5c/docs/patterns/celery.rst",
          "/tmp/b7e98c65-5d2f-4fba-9d06-485708620d5c/docs/patterns/deferredcallbacks.rst",
          "/tmp/b7e98c65-5d2f-4fba-9d06-485708620d5c/docs/patterns/favicon.rst",
          "/tmp/b7e98c65-5d2f-4fba-9d06-485708620d5c/docs/patterns/fileuploads.rst",
          "/tmp/b7e98c65-5d2f-4fba-9d06-485708620d5c/docs/patterns/flashing.rst",
          "/tmp/b7e98c65-5d2f-4fba-9d06-485708620d5c/docs/patterns/index.rst",
          "/tmp/b7e98c65-5d2f-4fba-9d06-485708620d5c/docs/patterns/javascript.rst",
          "/tmp/b7e98c65-5d2f-4fba-9d06-485708620d5c/docs/patterns/jquery.rst",
          "/tmp/b7e98c65-5d2f-4fba-9d06-485708620d5c/docs/patterns/lazyloading.rst",
          "/tmp/b7e98c65-5d2f-4fba-9d06-485708620d5c/docs/patterns/methodoverrides.rst",
          "/tmp/b7e98c65-5d2f-4fba-9d06-485708620d5c/docs/patterns/mongoengine.rst",
          "/tmp/b7e98c65-5d2f-4fba-9d06-485708620d5c/docs/patterns/packages.rst",
          "/tmp/b7e98c65-5d2f-4fba-9d06-485708620d5c/docs/patterns/requestchecksum.rst",
          "/tmp/b7e98c65-5d2f-4fba-9d06-485708620d5c/docs/patterns/singlepageapplications.rst",
          "/tmp/b7e98c65-5d2f-4fba-9d06-485708620d5c/docs/patterns/sqlalchemy.rst",
          "/tmp/b7e98c65-5d2f-4fba-9d06-485708620d5c/docs/patterns/sqlite3.rst",
          "/tmp/b7e98c65-5d2f-4fba-9d06-485708620d5c/docs/patterns/streaming.rst",
          "/tmp/b7e98c65-5d2f-4fba-9d06-485708620d5c/docs/patterns/subclassing.rst",
          "/tmp/b7e98c65-5d2f-4fba-9d06-485708620d5c/docs/patterns/templateinheritance.rst",
          "/tmp/b7e98c65-5d2f-4fba-9d06-485708620d5c/docs/patterns/urlprocessors.rst",
          "/tmp/b7e98c65-5d2f-4fba-9d06-485708620d5c/docs/patterns/viewdecorators.rst",
          "/tmp/b7e98c65-5d2f-4fba-9d06-485708620d5c/docs/patterns/wtforms.rst",
          "/tmp/b7e98c65-5d2f-4fba-9d06-485708620d5c/docs/quickstart.rst",
          "/tmp/b7e98c65-5d2f-4fba-9d06-485708620d5c/docs/reqcontext.rst",
          "/tmp/b7e98c65-5d2f-4fba-9d06-485708620d5c/docs/security.rst",
          "/tmp/b7e98c65-5d2f-4fba-9d06-485708620d5c/docs/server.rst",
          "/tmp/b7e98c65-5d2f-4fba-9d06-485708620d5c/docs/shell.rst",
          "/tmp/b7e98c65-5d2f-4fba-9d06-485708620d5c/docs/signals.rst",
          "/tmp/b7e98c65-5d2f-4fba-9d06-485708620d5c/docs/templating.rst",
          "/tmp/b7e98c65-5d2f-4fba-9d06-485708620d5c/docs/testing.rst",
          "/tmp/b7e98c65-5d2f-4fba-9d06-485708620d5c/docs/tutorial/blog.rst",
          "/tmp/b7e98c65-5d2f-4fba-9d06-485708620d5c/docs/tutorial/database.rst",
          "/tmp/b7e98c65-5d2f-4fba-9d06-485708620d5c/docs/tutorial/deploy.rst",
          "/tmp/b7e98c65-5d2f-4fba-9d06-485708620d5c/docs/tutorial/factory.rst",
          "/tmp/b7e98c65-5d2f-4fba-9d06-485708620d5c/docs/tutorial/flaskr_edit.png",
          "/tmp/b7e98c65-5d2f-4fba-9d06-485708620d5c/docs/tutorial/flaskr_index.png",
          "/tmp/b7e98c65-5d2f-4fba-9d06-485708620d5c/docs/tutorial/flaskr_login.png",
          "/tmp/b7e98c65-5d2f-4fba-9d06-485708620d5c/docs/tutorial/index.rst",
          "/tmp/b7e98c65-5d2f-4fba-9d06-485708620d5c/docs/tutorial/install.rst",
          "/tmp/b7e98c65-5d2f-4fba-9d06-485708620d5c/docs/tutorial/layout.rst",
          "/tmp/b7e98c65-5d2f-4fba-9d06-485708620d5c/docs/tutorial/next.rst",
          "/tmp/b7e98c65-5d2f-4fba-9d06-485708620d5c/docs/tutorial/static.rst",
          "/tmp/b7e98c65-5d2f-4fba-9d06-485708620d5c/docs/tutorial/templates.rst",
          "/tmp/b7e98c65-5d2f-4fba-9d06-485708620d5c/docs/tutorial/tests.rst",
          "/tmp/b7e98c65-5d2f-4fba-9d06-485708620d5c/docs/tutorial/views.rst",
          "/tmp/b7e98c65-5d2f-4fba-9d06-485708620d5c/docs/views.rst",
          "/tmp/b7e98c65-5d2f-4fba-9d06-485708620d5c/examples/celery/README.md",
          "/tmp/b7e98c65-5d2f-4fba-9d06-485708620d5c/examples/celery/make_celery.py",
          "/tmp/b7e98c65-5d2f-4fba-9d06-485708620d5c/examples/celery/pyproject.toml",
          "/tmp/b7e98c65-5d2f-4fba-9d06-485708620d5c/examples/celery/requirements.txt",
          "/tmp/b7e98c65-5d2f-4fba-9d06-485708620d5c/examples/celery/src/task_app/__init__.py",
          "/tmp/b7e98c65-5d2f-4fba-9d06-485708620d5c/examples/celery/src/task_app/tasks.py",
          "/tmp/b7e98c65-5d2f-4fba-9d06-485708620d5c/examples/celery/src/task_app/templates/index.html",
          "/tmp/b7e98c65-5d2f-4fba-9d06-485708620d5c/examples/celery/src/task_app/views.py",
          "/tmp/b7e98c65-5d2f-4fba-9d06-485708620d5c/examples/javascript/.gitignore",
          "/tmp/b7e98c65-5d2f-4fba-9d06-485708620d5c/examples/javascript/LICENSE.rst",
          "/tmp/b7e98c65-5d2f-4fba-9d06-485708620d5c/examples/javascript/MANIFEST.in",
          "/tmp/b7e98c65-5d2f-4fba-9d06-485708620d5c/examples/javascript/README.rst",
          "/tmp/b7e98c65-5d2f-4fba-9d06-485708620d5c/examples/javascript/js_example/__init__.py",
          "/tmp/b7e98c65-5d2f-4fba-9d06-485708620d5c/examples/javascript/js_example/templates/base.html",
          "/tmp/b7e98c65-5d2f-4fba-9d06-485708620d5c/examples/javascript/js_example/templates/fetch.html",
          "/tmp/b7e98c65-5d2f-4fba-9d06-485708620d5c/examples/javascript/js_example/templates/jquery.html",
          "/tmp/b7e98c65-5d2f-4fba-9d06-485708620d5c/examples/javascript/js_example/templates/xhr.html",
          "/tmp/b7e98c65-5d2f-4fba-9d06-485708620d5c/examples/javascript/js_example/views.py",
          "/tmp/b7e98c65-5d2f-4fba-9d06-485708620d5c/examples/javascript/pyproject.toml",
          "/tmp/b7e98c65-5d2f-4fba-9d06-485708620d5c/examples/javascript/tests/conftest.py",
          "/tmp/b7e98c65-5d2f-4fba-9d06-485708620d5c/examples/javascript/tests/test_js_example.py",
          "/tmp/b7e98c65-5d2f-4fba-9d06-485708620d5c/examples/tutorial/.gitignore",
          "/tmp/b7e98c65-5d2f-4fba-9d06-485708620d5c/examples/tutorial/LICENSE.rst",
          "/tmp/b7e98c65-5d2f-4fba-9d06-485708620d5c/examples/tutorial/MANIFEST.in",
          "/tmp/b7e98c65-5d2f-4fba-9d06-485708620d5c/examples/tutorial/README.rst",
          "/tmp/b7e98c65-5d2f-4fba-9d06-485708620d5c/examples/tutorial/flaskr/__init__.py",
          "/tmp/b7e98c65-5d2f-4fba-9d06-485708620d5c/examples/tutorial/flaskr/auth.py",
          "/tmp/b7e98c65-5d2f-4fba-9d06-485708620d5c/examples/tutorial/flaskr/blog.py",
          "/tmp/b7e98c65-5d2f-4fba-9d06-485708620d5c/examples/tutorial/flaskr/db.py",
          "/tmp/b7e98c65-5d2f-4fba-9d06-485708620d5c/examples/tutorial/flaskr/schema.sql",
          "/tmp/b7e98c65-5d2f-4fba-9d06-485708620d5c/examples/tutorial/flaskr/static/style.css",
          "/tmp/b7e98c65-5d2f-4fba-9d06-485708620d5c/examples/tutorial/flaskr/templates/auth/login.html",
          "/tmp/b7e98c65-5d2f-4fba-9d06-485708620d5c/examples/tutorial/flaskr/templates/auth/register.html",
          "/tmp/b7e98c65-5d2f-4fba-9d06-485708620d5c/examples/tutorial/flaskr/templates/base.html",
          "/tmp/b7e98c65-5d2f-4fba-9d06-485708620d5c/examples/tutorial/flaskr/templates/blog/create.html",
          "/tmp/b7e98c65-5d2f-4fba-9d06-485708620d5c/examples/tutorial/flaskr/templates/blog/index.html",
          "/tmp/b7e98c65-5d2f-4fba-9d06-485708620d5c/examples/tutorial/flaskr/templates/blog/update.html",
          "/tmp/b7e98c65-5d2f-4fba-9d06-485708620d5c/examples/tutorial/pyproject.toml",
          "/tmp/b7e98c65-5d2f-4fba-9d06-485708620d5c/examples/tutorial/tests/conftest.py",
          "/tmp/b7e98c65-5d2f-4fba-9d06-485708620d5c/examples/tutorial/tests/data.sql",
          "/tmp/b7e98c65-5d2f-4fba-9d06-485708620d5c/examples/tutorial/tests/test_auth.py",
          "/tmp/b7e98c65-5d2f-4fba-9d06-485708620d5c/examples/tutorial/tests/test_blog.py",
          "/tmp/b7e98c65-5d2f-4fba-9d06-485708620d5c/examples/tutorial/tests/test_db.py",
          "/tmp/b7e98c65-5d2f-4fba-9d06-485708620d5c/examples/tutorial/tests/test_factory.py",
          "/tmp/b7e98c65-5d2f-4fba-9d06-485708620d5c/pyproject.toml",
          "/tmp/b7e98c65-5d2f-4fba-9d06-485708620d5c/requirements/build.in",
          "/tmp/b7e98c65-5d2f-4fba-9d06-485708620d5c/requirements/build.txt",
          "/tmp/b7e98c65-5d2f-4fba-9d06-485708620d5c/requirements/dev.in",
          "/tmp/b7e98c65-5d2f-4fba-9d06-485708620d5c/requirements/dev.txt",
          "/tmp/b7e98c65-5d2f-4fba-9d06-485708620d5c/requirements/docs.in",
          "/tmp/b7e98c65-5d2f-4fba-9d06-485708620d5c/requirements/docs.txt",
          "/tmp/b7e98c65-5d2f-4fba-9d06-485708620d5c/requirements/tests-pallets-min.in",
          "/tmp/b7e98c65-5d2f-4fba-9d06-485708620d5c/requirements/tests-pallets-min.txt",
          "/tmp/b7e98c65-5d2f-4fba-9d06-485708620d5c/requirements/tests.in",
          "/tmp/b7e98c65-5d2f-4fba-9d06-485708620d5c/requirements/tests.txt",
          "/tmp/b7e98c65-5d2f-4fba-9d06-485708620d5c/requirements/typing.in",
          "/tmp/b7e98c65-5d2f-4fba-9d06-485708620d5c/requirements/typing.txt",
          "/tmp/b7e98c65-5d2f-4fba-9d06-485708620d5c/src/flask/__init__.py",
          "/tmp/b7e98c65-5d2f-4fba-9d06-485708620d5c/src/flask/__main__.py",
          "/tmp/b7e98c65-5d2f-4fba-9d06-485708620d5c/src/flask/app.py",
          "/tmp/b7e98c65-5d2f-4fba-9d06-485708620d5c/src/flask/blueprints.py",
          "/tmp/b7e98c65-5d2f-4fba-9d06-485708620d5c/src/flask/cli.py",
          "/tmp/b7e98c65-5d2f-4fba-9d06-485708620d5c/src/flask/config.py",
          "/tmp/b7e98c65-5d2f-4fba-9d06-485708620d5c/src/flask/ctx.py",
          "/tmp/b7e98c65-5d2f-4fba-9d06-485708620d5c/src/flask/debughelpers.py",
          "/tmp/b7e98c65-5d2f-4fba-9d06-485708620d5c/src/flask/globals.py",
          "/tmp/b7e98c65-5d2f-4fba-9d06-485708620d5c/src/flask/helpers.py",
          "/tmp/b7e98c65-5d2f-4fba-9d06-485708620d5c/src/flask/json/__init__.py",
          "/tmp/b7e98c65-5d2f-4fba-9d06-485708620d5c/src/flask/json/provider.py",
          "/tmp/b7e98c65-5d2f-4fba-9d06-485708620d5c/src/flask/json/tag.py",
          "/tmp/b7e98c65-5d2f-4fba-9d06-485708620d5c/src/flask/logging.py",
          "/tmp/b7e98c65-5d2f-4fba-9d06-485708620d5c/src/flask/py.typed",
          "/tmp/b7e98c65-5d2f-4fba-9d06-485708620d5c/src/flask/scaffold.py",
          "/tmp/b7e98c65-5d2f-4fba-9d06-485708620d5c/src/flask/sessions.py",
          "/tmp/b7e98c65-5d2f-4fba-9d06-485708620d5c/src/flask/signals.py",
          "/tmp/b7e98c65-5d2f-4fba-9d06-485708620d5c/src/flask/templating.py",
          "/tmp/b7e98c65-5d2f-4fba-9d06-485708620d5c/src/flask/testing.py",
          "/tmp/b7e98c65-5d2f-4fba-9d06-485708620d5c/src/flask/typing.py",
          "/tmp/b7e98c65-5d2f-4fba-9d06-485708620d5c/src/flask/views.py",
          "/tmp/b7e98c65-5d2f-4fba-9d06-485708620d5c/src/flask/wrappers.py",
          "/tmp/b7e98c65-5d2f-4fba-9d06-485708620d5c/tests/conftest.py",
          "/tmp/b7e98c65-5d2f-4fba-9d06-485708620d5c/tests/static/config.json",
          "/tmp/b7e98c65-5d2f-4fba-9d06-485708620d5c/tests/static/config.toml",
          "/tmp/b7e98c65-5d2f-4fba-9d06-485708620d5c/tests/static/index.html",
          "/tmp/b7e98c65-5d2f-4fba-9d06-485708620d5c/tests/templates/_macro.html",
          "/tmp/b7e98c65-5d2f-4fba-9d06-485708620d5c/tests/templates/context_template.html",
          "/tmp/b7e98c65-5d2f-4fba-9d06-485708620d5c/tests/templates/escaping_template.html",
          "/tmp/b7e98c65-5d2f-4fba-9d06-485708620d5c/tests/templates/mail.txt",
          "/tmp/b7e98c65-5d2f-4fba-9d06-485708620d5c/tests/templates/nested/nested.txt",
          "/tmp/b7e98c65-5d2f-4fba-9d06-485708620d5c/tests/templates/non_escaping_template.txt",
          "/tmp/b7e98c65-5d2f-4fba-9d06-485708620d5c/tests/templates/simple_template.html",
          "/tmp/b7e98c65-5d2f-4fba-9d06-485708620d5c/tests/templates/template_filter.html",
          "/tmp/b7e98c65-5d2f-4fba-9d06-485708620d5c/tests/templates/template_test.html",
          "/tmp/b7e98c65-5d2f-4fba-9d06-485708620d5c/tests/test_appctx.py",
          "/tmp/b7e98c65-5d2f-4fba-9d06-485708620d5c/tests/test_apps/.env",
          "/tmp/b7e98c65-5d2f-4fba-9d06-485708620d5c/tests/test_apps/.flaskenv",
          "/tmp/b7e98c65-5d2f-4fba-9d06-485708620d5c/tests/test_apps/blueprintapp/__init__.py",
          "/tmp/b7e98c65-5d2f-4fba-9d06-485708620d5c/tests/test_apps/blueprintapp/apps/__init__.py",
          "/tmp/b7e98c65-5d2f-4fba-9d06-485708620d5c/tests/test_apps/blueprintapp/apps/admin/__init__.py",
          "/tmp/b7e98c65-5d2f-4fba-9d06-485708620d5c/tests/test_apps/blueprintapp/apps/admin/static/css/test.css",
          "/tmp/b7e98c65-5d2f-4fba-9d06-485708620d5c/tests/test_apps/blueprintapp/apps/admin/static/test.txt",
          "/tmp/b7e98c65-5d2f-4fba-9d06-485708620d5c/tests/test_apps/blueprintapp/apps/admin/templates/admin/index.html",
          "/tmp/b7e98c65-5d2f-4fba-9d06-485708620d5c/tests/test_apps/blueprintapp/apps/frontend/__init__.py",
          "/tmp/b7e98c65-5d2f-4fba-9d06-485708620d5c/tests/test_apps/blueprintapp/apps/frontend/templates/frontend/index.html",
          "/tmp/b7e98c65-5d2f-4fba-9d06-485708620d5c/tests/test_apps/cliapp/__init__.py",
          "/tmp/b7e98c65-5d2f-4fba-9d06-485708620d5c/tests/test_apps/cliapp/app.py",
          "/tmp/b7e98c65-5d2f-4fba-9d06-485708620d5c/tests/test_apps/cliapp/factory.py",
          "/tmp/b7e98c65-5d2f-4fba-9d06-485708620d5c/tests/test_apps/cliapp/importerrorapp.py",
          "/tmp/b7e98c65-5d2f-4fba-9d06-485708620d5c/tests/test_apps/cliapp/inner1/__init__.py",
          "/tmp/b7e98c65-5d2f-4fba-9d06-485708620d5c/tests/test_apps/cliapp/inner1/inner2/__init__.py",
          "/tmp/b7e98c65-5d2f-4fba-9d06-485708620d5c/tests/test_apps/cliapp/inner1/inner2/flask.py",
          "/tmp/b7e98c65-5d2f-4fba-9d06-485708620d5c/tests/test_apps/cliapp/message.txt",
          "/tmp/b7e98c65-5d2f-4fba-9d06-485708620d5c/tests/test_apps/cliapp/multiapp.py",
          "/tmp/b7e98c65-5d2f-4fba-9d06-485708620d5c/tests/test_apps/helloworld/hello.py",
          "/tmp/b7e98c65-5d2f-4fba-9d06-485708620d5c/tests/test_apps/helloworld/wsgi.py",
          "/tmp/b7e98c65-5d2f-4fba-9d06-485708620d5c/tests/test_apps/subdomaintestmodule/__init__.py",
          "/tmp/b7e98c65-5d2f-4fba-9d06-485708620d5c/tests/test_apps/subdomaintestmodule/static/hello.txt",
          "/tmp/b7e98c65-5d2f-4fba-9d06-485708620d5c/tests/test_async.py",
          "/tmp/b7e98c65-5d2f-4fba-9d06-485708620d5c/tests/test_basic.py",
          "/tmp/b7e98c65-5d2f-4fba-9d06-485708620d5c/tests/test_blueprints.py",
          "/tmp/b7e98c65-5d2f-4fba-9d06-485708620d5c/tests/test_cli.py",
          "/tmp/b7e98c65-5d2f-4fba-9d06-485708620d5c/tests/test_config.py",
          "/tmp/b7e98c65-5d2f-4fba-9d06-485708620d5c/tests/test_converters.py",
          "/tmp/b7e98c65-5d2f-4fba-9d06-485708620d5c/tests/test_helpers.py",
          "/tmp/b7e98c65-5d2f-4fba-9d06-485708620d5c/tests/test_instance_config.py",
          "/tmp/b7e98c65-5d2f-4fba-9d06-485708620d5c/tests/test_json.py",
          "/tmp/b7e98c65-5d2f-4fba-9d06-485708620d5c/tests/test_json_tag.py",
          "/tmp/b7e98c65-5d2f-4fba-9d06-485708620d5c/tests/test_logging.py",
          "/tmp/b7e98c65-5d2f-4fba-9d06-485708620d5c/tests/test_regression.py",
          "/tmp/b7e98c65-5d2f-4fba-9d06-485708620d5c/tests/test_reqctx.py",
          "/tmp/b7e98c65-5d2f-4fba-9d06-485708620d5c/tests/test_session_interface.py",
          "/tmp/b7e98c65-5d2f-4fba-9d06-485708620d5c/tests/test_signals.py",
          "/tmp/b7e98c65-5d2f-4fba-9d06-485708620d5c/tests/test_subclassing.py",
          "/tmp/b7e98c65-5d2f-4fba-9d06-485708620d5c/tests/test_templating.py",
          "/tmp/b7e98c65-5d2f-4fba-9d06-485708620d5c/tests/test_testing.py",
          "/tmp/b7e98c65-5d2f-4fba-9d06-485708620d5c/tests/test_user_error_handler.py",
          "/tmp/b7e98c65-5d2f-4fba-9d06-485708620d5c/tests/test_views.py",
          "/tmp/b7e98c65-5d2f-4fba-9d06-485708620d5c/tests/typing/typing_app_decorators.py",
          "/tmp/b7e98c65-5d2f-4fba-9d06-485708620d5c/tests/typing/typing_error_handler.py",
          "/tmp/b7e98c65-5d2f-4fba-9d06-485708620d5c/tests/typing/typing_route.py",
          "/tmp/b7e98c65-5d2f-4fba-9d06-485708620d5c/tox.ini"
       ]
    },
    "results":[
       {
          "check_id":"javascript.express.security.audit.xss.mustache.var-in-href.var-in-href",
          "end":{
             "col":59,
             "line":17,
             "offset":667
          },
          "extra":{
             "engine_kind":"OSS",
             "fingerprint":"f2eb685895911fa74119f6527edcb4785d54dc83805378628b89599bfe7286b7e4417737b400a5407e1553ad4b7c6f96f3bd5fd9331a937783457faed397ff83_0",
             "is_ignored":false,
             "lines":"    <a href=\"{{ url_for('index', js='fetch') }}\">Fetch</a>",
             "message":"Detected a template variable used in an anchor tag with the 'href' attribute. This allows a malicious actor to input the 'javascript:' URI and is subject to cross- site scripting (XSS) attacks. If using a relative URL, start with a literal forward slash and concatenate the URL, like this: href='/{{link}}'. You may also consider setting the Content Security Policy (CSP) header.",
             "metadata":{
                "category":"security",
                "confidence":"LOW",
                "cwe":[
                   "CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"
                ],
                "cwe2021-top25":true,
                "cwe2022-top25":true,
                "impact":"MEDIUM",
                "license":"Commons Clause License Condition v1.0[LGPL-2.1-only]",
                "likelihood":"LOW",
                "owasp":[
                   "A07:2017 - Cross-Site Scripting (XSS)",
                   "A03:2021 - Injection"
                ],
                "references":[
                   "https://flask.palletsprojects.com/en/1.1.x/security/#cross-site-scripting-xss#:~:text=javascript:%20URI",
                   "https://github.com/pugjs/pug/issues/2952"
                ],
                "semgrep.dev":{
                   "rule":{
                      "origin":"community",
                      "rule_id":"AbUzlj",
                      "url":"https://semgrep.dev/playground/r/jQT95n/javascript.express.security.audit.xss.mustache.var-in-href.var-in-href",
                      "version_id":"jQT95n"
                   }
                },
                "shortlink":"https://sg.run/8yOq",
                "source":"https://semgrep.dev/r/javascript.express.security.audit.xss.mustache.var-in-href.var-in-href",
                "subcategory":[
                   "audit"
                ],
                "technology":[
                   "express"
                ]
             },
             "metavars":{
                "$1":{
                   "abstract_content":"\"",
                   "end":{
                      "col":14,
                      "line":17,
                      "offset":622
                   },
                   "start":{
                      "col":13,
                      "line":17,
                      "offset":621
                   }
                }
             },
             "severity":"WARNING"
          },
          "path":"/tmp/b7e98c65-5d2f-4fba-9d06-485708620d5c/examples/javascript/js_example/templates/base.html",
          "start":{
             "col":5,
             "line":17,
             "offset":613
          }
       },
       {
          "check_id":"javascript.express.security.audit.xss.mustache.var-in-href.var-in-href",
          "end":{
             "col":55,
             "line":19,
             "offset":775
          },
          "extra":{
             "engine_kind":"OSS",
             "fingerprint":"f2eb685895911fa74119f6527edcb4785d54dc83805378628b89599bfe7286b7e4417737b400a5407e1553ad4b7c6f96f3bd5fd9331a937783457faed397ff83_1",
             "is_ignored":false,
             "lines":"    <a href=\"{{ url_for('index', js='xhr') }}\">XHR</a>",
             "message":"Detected a template variable used in an anchor tag with the 'href' attribute. This allows a malicious actor to input the 'javascript:' URI and is subject to cross- site scripting (XSS) attacks. If using a relative URL, start with a literal forward slash and concatenate the URL, like this: href='/{{link}}'. You may also consider setting the Content Security Policy (CSP) header.",
             "metadata":{
                "category":"security",
                "confidence":"LOW",
                "cwe":[
                   "CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"
                ],
                "cwe2021-top25":true,
                "cwe2022-top25":true,
                "impact":"MEDIUM",
                "license":"Commons Clause License Condition v1.0[LGPL-2.1-only]",
                "likelihood":"LOW",
                "owasp":[
                   "A07:2017 - Cross-Site Scripting (XSS)",
                   "A03:2021 - Injection"
                ],
                "references":[
                   "https://flask.palletsprojects.com/en/1.1.x/security/#cross-site-scripting-xss#:~:text=javascript:%20URI",
                   "https://github.com/pugjs/pug/issues/2952"
                ],
                "semgrep.dev":{
                   "rule":{
                      "origin":"community",
                      "rule_id":"AbUzlj",
                      "url":"https://semgrep.dev/playground/r/jQT95n/javascript.express.security.audit.xss.mustache.var-in-href.var-in-href",
                      "version_id":"jQT95n"
                   }
                },
                "shortlink":"https://sg.run/8yOq",
                "source":"https://semgrep.dev/r/javascript.express.security.audit.xss.mustache.var-in-href.var-in-href",
                "subcategory":[
                   "audit"
                ],
                "technology":[
                   "express"
                ]
             },
             "metavars":{
                "$1":{
                   "abstract_content":"\"",
                   "end":{
                      "col":14,
                      "line":19,
                      "offset":734
                   },
                   "start":{
                      "col":13,
                      "line":19,
                      "offset":733
                   }
                }
             },
             "severity":"WARNING"
          },
          "path":"/tmp/b7e98c65-5d2f-4fba-9d06-485708620d5c/examples/javascript/js_example/templates/base.html",
          "start":{
             "col":5,
             "line":19,
             "offset":725
          }
       },
       {
          "check_id":"javascript.express.security.audit.xss.mustache.var-in-href.var-in-href",
          "end":{
             "col":61,
             "line":21,
             "offset":892
          },
          "extra":{
             "engine_kind":"OSS",
             "fingerprint":"f2eb685895911fa74119f6527edcb4785d54dc83805378628b89599bfe7286b7e4417737b400a5407e1553ad4b7c6f96f3bd5fd9331a937783457faed397ff83_2",
             "is_ignored":false,
             "lines":"    <a href=\"{{ url_for('index', js='jquery') }}\">jQuery</a>",
             "message":"Detected a template variable used in an anchor tag with the 'href' attribute. This allows a malicious actor to input the 'javascript:' URI and is subject to cross- site scripting (XSS) attacks. If using a relative URL, start with a literal forward slash and concatenate the URL, like this: href='/{{link}}'. You may also consider setting the Content Security Policy (CSP) header.",
             "metadata":{
                "category":"security",
                "confidence":"LOW",
                "cwe":[
                   "CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"
                ],
                "cwe2021-top25":true,
                "cwe2022-top25":true,
                "impact":"MEDIUM",
                "license":"Commons Clause License Condition v1.0[LGPL-2.1-only]",
                "likelihood":"LOW",
                "owasp":[
                   "A07:2017 - Cross-Site Scripting (XSS)",
                   "A03:2021 - Injection"
                ],
                "references":[
                   "https://flask.palletsprojects.com/en/1.1.x/security/#cross-site-scripting-xss#:~:text=javascript:%20URI",
                   "https://github.com/pugjs/pug/issues/2952"
                ],
                "semgrep.dev":{
                   "rule":{
                      "origin":"community",
                      "rule_id":"AbUzlj",
                      "url":"https://semgrep.dev/playground/r/jQT95n/javascript.express.security.audit.xss.mustache.var-in-href.var-in-href",
                      "version_id":"jQT95n"
                   }
                },
                "shortlink":"https://sg.run/8yOq",
                "source":"https://semgrep.dev/r/javascript.express.security.audit.xss.mustache.var-in-href.var-in-href",
                "subcategory":[
                   "audit"
                ],
                "technology":[
                   "express"
                ]
             },
             "metavars":{
                "$1":{
                   "abstract_content":"\"",
                   "end":{
                      "col":14,
                      "line":21,
                      "offset":845
                   },
                   "start":{
                      "col":13,
                      "line":21,
                      "offset":844
                   }
                }
             },
             "severity":"WARNING"
          },
          "path":"/tmp/b7e98c65-5d2f-4fba-9d06-485708620d5c/examples/javascript/js_example/templates/base.html",
          "start":{
             "col":5,
             "line":21,
             "offset":836
          }
       },
       {
          "check_id":"javascript.express.security.audit.xss.mustache.var-in-href.var-in-href",
          "end":{
             "col":71,
             "line":7,
             "offset":344
          },
          "extra":{
             "engine_kind":"OSS",
             "fingerprint":"030964a48fff803657e9505d5964737992c1a1aea921bfb7bc96c335196e4bb0d41a39544c68397c5b737072d7a9aec346213eebc7dcb24e7dd1d9542520efc2_0",
             "is_ignored":false,
             "lines":"  <a href=\"{{ url_for(\"index\", js=\"fetch\") }}\"><code>fetch</code></a>.",
             "message":"Detected a template variable used in an anchor tag with the 'href' attribute. This allows a malicious actor to input the 'javascript:' URI and is subject to cross- site scripting (XSS) attacks. If using a relative URL, start with a literal forward slash and concatenate the URL, like this: href='/{{link}}'. You may also consider setting the Content Security Policy (CSP) header.",
             "metadata":{
                "category":"security",
                "confidence":"LOW",
                "cwe":[
                   "CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"
                ],
                "cwe2021-top25":true,
                "cwe2022-top25":true,
                "impact":"MEDIUM",
                "license":"Commons Clause License Condition v1.0[LGPL-2.1-only]",
                "likelihood":"LOW",
                "owasp":[
                   "A07:2017 - Cross-Site Scripting (XSS)",
                   "A03:2021 - Injection"
                ],
                "references":[
                   "https://flask.palletsprojects.com/en/1.1.x/security/#cross-site-scripting-xss#:~:text=javascript:%20URI",
                   "https://github.com/pugjs/pug/issues/2952"
                ],
                "semgrep.dev":{
                   "rule":{
                      "origin":"community",
                      "rule_id":"AbUzlj",
                      "url":"https://semgrep.dev/playground/r/jQT95n/javascript.express.security.audit.xss.mustache.var-in-href.var-in-href",
                      "version_id":"jQT95n"
                   }
                },
                "shortlink":"https://sg.run/8yOq",
                "source":"https://semgrep.dev/r/javascript.express.security.audit.xss.mustache.var-in-href.var-in-href",
                "subcategory":[
                   "audit"
                ],
                "technology":[
                   "express"
                ]
             },
             "metavars":{
                "$1":{
                   "abstract_content":"\"",
                   "end":{
                      "col":12,
                      "line":7,
                      "offset":285
                   },
                   "start":{
                      "col":11,
                      "line":7,
                      "offset":284
                   }
                }
             },
             "severity":"WARNING"
          },
          "path":"/tmp/b7e98c65-5d2f-4fba-9d06-485708620d5c/examples/javascript/js_example/templates/xhr.html",
          "start":{
             "col":3,
             "line":7,
             "offset":276
          }
       },
       {
          "check_id":"javascript.express.security.audit.xss.mustache.var-in-href.var-in-href",
          "end":{
             "col":55,
             "line":5,
             "offset":209
          },
          "extra":{
             "engine_kind":"OSS",
             "fingerprint":"1d723ed10c1d43b9deaca2665c00e92905f3f7d6fdefc49f6f2828643a33b47dc33034222e27bce3932c846c61bdeb5683d5334cd19fddf48966041dbe9af6d5_0",
             "is_ignored":false,
             "lines":"  <h1><a href=\"{{ url_for('index') }}\">Flaskr</a></h1>",
             "message":"Detected a template variable used in an anchor tag with the 'href' attribute. This allows a malicious actor to input the 'javascript:' URI and is subject to cross- site scripting (XSS) attacks. If using a relative URL, start with a literal forward slash and concatenate the URL, like this: href='/{{link}}'. You may also consider setting the Content Security Policy (CSP) header.",
             "metadata":{
                "category":"security",
                "confidence":"LOW",
                "cwe":[
                   "CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"
                ],
                "cwe2021-top25":true,
                "cwe2022-top25":true,
                "impact":"MEDIUM",
                "license":"Commons Clause License Condition v1.0[LGPL-2.1-only]",
                "likelihood":"LOW",
                "owasp":[
                   "A07:2017 - Cross-Site Scripting (XSS)",
                   "A03:2021 - Injection"
                ],
                "references":[
                   "https://flask.palletsprojects.com/en/1.1.x/security/#cross-site-scripting-xss#:~:text=javascript:%20URI",
                   "https://github.com/pugjs/pug/issues/2952"
                ],
                "semgrep.dev":{
                   "rule":{
                      "origin":"community",
                      "rule_id":"AbUzlj",
                      "url":"https://semgrep.dev/playground/r/jQT95n/javascript.express.security.audit.xss.mustache.var-in-href.var-in-href",
                      "version_id":"jQT95n"
                   }
                },
                "shortlink":"https://sg.run/8yOq",
                "source":"https://semgrep.dev/r/javascript.express.security.audit.xss.mustache.var-in-href.var-in-href",
                "subcategory":[
                   "audit"
                ],
                "technology":[
                   "express"
                ]
             },
             "metavars":{
                "$1":{
                   "abstract_content":"\"",
                   "end":{
                      "col":16,
                      "line":5,
                      "offset":170
                   },
                   "start":{
                      "col":15,
                      "line":5,
                      "offset":169
                   }
                }
             },
             "severity":"WARNING"
          },
          "path":"/tmp/b7e98c65-5d2f-4fba-9d06-485708620d5c/examples/tutorial/flaskr/templates/base.html",
          "start":{
             "col":7,
             "line":5,
             "offset":161
          }
       },
       {
          "check_id":"javascript.express.security.audit.xss.mustache.var-in-href.var-in-href",
          "end":{
             "col":61,
             "line":9,
             "offset":345
          },
          "extra":{
             "engine_kind":"OSS",
             "fingerprint":"1d723ed10c1d43b9deaca2665c00e92905f3f7d6fdefc49f6f2828643a33b47dc33034222e27bce3932c846c61bdeb5683d5334cd19fddf48966041dbe9af6d5_1",
             "is_ignored":false,
             "lines":"      <li><a href=\"{{ url_for('auth.logout') }}\">Log Out</a>",
             "message":"Detected a template variable used in an anchor tag with the 'href' attribute. This allows a malicious actor to input the 'javascript:' URI and is subject to cross- site scripting (XSS) attacks. If using a relative URL, start with a literal forward slash and concatenate the URL, like this: href='/{{link}}'. You may also consider setting the Content Security Policy (CSP) header.",
             "metadata":{
                "category":"security",
                "confidence":"LOW",
                "cwe":[
                   "CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"
                ],
                "cwe2021-top25":true,
                "cwe2022-top25":true,
                "impact":"MEDIUM",
                "license":"Commons Clause License Condition v1.0[LGPL-2.1-only]",
                "likelihood":"LOW",
                "owasp":[
                   "A07:2017 - Cross-Site Scripting (XSS)",
                   "A03:2021 - Injection"
                ],
                "references":[
                   "https://flask.palletsprojects.com/en/1.1.x/security/#cross-site-scripting-xss#:~:text=javascript:%20URI",
                   "https://github.com/pugjs/pug/issues/2952"
                ],
                "semgrep.dev":{
                   "rule":{
                      "origin":"community",
                      "rule_id":"AbUzlj",
                      "url":"https://semgrep.dev/playground/r/jQT95n/javascript.express.security.audit.xss.mustache.var-in-href.var-in-href",
                      "version_id":"jQT95n"
                   }
                },
                "shortlink":"https://sg.run/8yOq",
                "source":"https://semgrep.dev/r/javascript.express.security.audit.xss.mustache.var-in-href.var-in-href",
                "subcategory":[
                   "audit"
                ],
                "technology":[
                   "express"
                ]
             },
             "metavars":{
                "$1":{
                   "abstract_content":"\"",
                   "end":{
                      "col":20,
                      "line":9,
                      "offset":304
                   },
                   "start":{
                      "col":19,
                      "line":9,
                      "offset":303
                   }
                }
             },
             "severity":"WARNING"
          },
          "path":"/tmp/b7e98c65-5d2f-4fba-9d06-485708620d5c/examples/tutorial/flaskr/templates/base.html",
          "start":{
             "col":11,
             "line":9,
             "offset":295
          }
       },
       {
          "check_id":"javascript.express.security.audit.xss.mustache.var-in-href.var-in-href",
          "end":{
             "col":64,
             "line":11,
             "offset":424
          },
          "extra":{
             "engine_kind":"OSS",
             "fingerprint":"1d723ed10c1d43b9deaca2665c00e92905f3f7d6fdefc49f6f2828643a33b47dc33034222e27bce3932c846c61bdeb5683d5334cd19fddf48966041dbe9af6d5_2",
             "is_ignored":false,
             "lines":"      <li><a href=\"{{ url_for('auth.register') }}\">Register</a>",
             "message":"Detected a template variable used in an anchor tag with the 'href' attribute. This allows a malicious actor to input the 'javascript:' URI and is subject to cross- site scripting (XSS) attacks. If using a relative URL, start with a literal forward slash and concatenate the URL, like this: href='/{{link}}'. You may also consider setting the Content Security Policy (CSP) header.",
             "metadata":{
                "category":"security",
                "confidence":"LOW",
                "cwe":[
                   "CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"
                ],
                "cwe2021-top25":true,
                "cwe2022-top25":true,
                "impact":"MEDIUM",
                "license":"Commons Clause License Condition v1.0[LGPL-2.1-only]",
                "likelihood":"LOW",
                "owasp":[
                   "A07:2017 - Cross-Site Scripting (XSS)",
                   "A03:2021 - Injection"
                ],
                "references":[
                   "https://flask.palletsprojects.com/en/1.1.x/security/#cross-site-scripting-xss#:~:text=javascript:%20URI",
                   "https://github.com/pugjs/pug/issues/2952"
                ],
                "semgrep.dev":{
                   "rule":{
                      "origin":"community",
                      "rule_id":"AbUzlj",
                      "url":"https://semgrep.dev/playground/r/jQT95n/javascript.express.security.audit.xss.mustache.var-in-href.var-in-href",
                      "version_id":"jQT95n"
                   }
                },
                "shortlink":"https://sg.run/8yOq",
                "source":"https://semgrep.dev/r/javascript.express.security.audit.xss.mustache.var-in-href.var-in-href",
                "subcategory":[
                   "audit"
                ],
                "technology":[
                   "express"
                ]
             },
             "metavars":{
                "$1":{
                   "abstract_content":"\"",
                   "end":{
                      "col":20,
                      "line":11,
                      "offset":380
                   },
                   "start":{
                      "col":19,
                      "line":11,
                      "offset":379
                   }
                }
             },
             "severity":"WARNING"
          },
          "path":"/tmp/b7e98c65-5d2f-4fba-9d06-485708620d5c/examples/tutorial/flaskr/templates/base.html",
          "start":{
             "col":11,
             "line":11,
             "offset":371
          }
       },
       {
          "check_id":"javascript.express.security.audit.xss.mustache.var-in-href.var-in-href",
          "end":{
             "col":59,
             "line":12,
             "offset":483
          },
          "extra":{
             "engine_kind":"OSS",
             "fingerprint":"1d723ed10c1d43b9deaca2665c00e92905f3f7d6fdefc49f6f2828643a33b47dc33034222e27bce3932c846c61bdeb5683d5334cd19fddf48966041dbe9af6d5_3",
             "is_ignored":false,
             "lines":"      <li><a href=\"{{ url_for('auth.login') }}\">Log In</a>",
             "message":"Detected a template variable used in an anchor tag with the 'href' attribute. This allows a malicious actor to input the 'javascript:' URI and is subject to cross- site scripting (XSS) attacks. If using a relative URL, start with a literal forward slash and concatenate the URL, like this: href='/{{link}}'. You may also consider setting the Content Security Policy (CSP) header.",
             "metadata":{
                "category":"security",
                "confidence":"LOW",
                "cwe":[
                   "CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"
                ],
                "cwe2021-top25":true,
                "cwe2022-top25":true,
                "impact":"MEDIUM",
                "license":"Commons Clause License Condition v1.0[LGPL-2.1-only]",
                "likelihood":"LOW",
                "owasp":[
                   "A07:2017 - Cross-Site Scripting (XSS)",
                   "A03:2021 - Injection"
                ],
                "references":[
                   "https://flask.palletsprojects.com/en/1.1.x/security/#cross-site-scripting-xss#:~:text=javascript:%20URI",
                   "https://github.com/pugjs/pug/issues/2952"
                ],
                "semgrep.dev":{
                   "rule":{
                      "origin":"community",
                      "rule_id":"AbUzlj",
                      "url":"https://semgrep.dev/playground/r/jQT95n/javascript.express.security.audit.xss.mustache.var-in-href.var-in-href",
                      "version_id":"jQT95n"
                   }
                },
                "shortlink":"https://sg.run/8yOq",
                "source":"https://semgrep.dev/r/javascript.express.security.audit.xss.mustache.var-in-href.var-in-href",
                "subcategory":[
                   "audit"
                ],
                "technology":[
                   "express"
                ]
             },
             "metavars":{
                "$1":{
                   "abstract_content":"\"",
                   "end":{
                      "col":20,
                      "line":12,
                      "offset":444
                   },
                   "start":{
                      "col":19,
                      "line":12,
                      "offset":443
                   }
                }
             },
             "severity":"WARNING"
          },
          "path":"/tmp/b7e98c65-5d2f-4fba-9d06-485708620d5c/examples/tutorial/flaskr/templates/base.html",
          "start":{
             "col":11,
             "line":12,
             "offset":435
          }
       },
       {
          "check_id":"javascript.express.security.audit.xss.mustache.var-in-href.var-in-href",
          "end":{
             "col":66,
             "line":6,
             "offset":177
          },
          "extra":{
             "engine_kind":"OSS",
             "fingerprint":"d08a6f9b90f5f535c35e30b9f038594cb777b8b1eb11af48075b564c3b37419c1cb93e0478d1272aa127881c31540ff1ecc0743610ca5bfcec60880a33ef1f30_0",
             "is_ignored":false,
             "lines":"    <a class=\"action\" href=\"{{ url_for('blog.create') }}\">New</a>",
             "message":"Detected a template variable used in an anchor tag with the 'href' attribute. This allows a malicious actor to input the 'javascript:' URI and is subject to cross- site scripting (XSS) attacks. If using a relative URL, start with a literal forward slash and concatenate the URL, like this: href='/{{link}}'. You may also consider setting the Content Security Policy (CSP) header.",
             "metadata":{
                "category":"security",
                "confidence":"LOW",
                "cwe":[
                   "CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"
                ],
                "cwe2021-top25":true,
                "cwe2022-top25":true,
                "impact":"MEDIUM",
                "license":"Commons Clause License Condition v1.0[LGPL-2.1-only]",
                "likelihood":"LOW",
                "owasp":[
                   "A07:2017 - Cross-Site Scripting (XSS)",
                   "A03:2021 - Injection"
                ],
                "references":[
                   "https://flask.palletsprojects.com/en/1.1.x/security/#cross-site-scripting-xss#:~:text=javascript:%20URI",
                   "https://github.com/pugjs/pug/issues/2952"
                ],
                "semgrep.dev":{
                   "rule":{
                      "origin":"community",
                      "rule_id":"AbUzlj",
                      "url":"https://semgrep.dev/playground/r/jQT95n/javascript.express.security.audit.xss.mustache.var-in-href.var-in-href",
                      "version_id":"jQT95n"
                   }
                },
                "shortlink":"https://sg.run/8yOq",
                "source":"https://semgrep.dev/r/javascript.express.security.audit.xss.mustache.var-in-href.var-in-href",
                "subcategory":[
                   "audit"
                ],
                "technology":[
                   "express"
                ]
             },
             "metavars":{
                "$1":{
                   "abstract_content":"\"",
                   "end":{
                      "col":29,
                      "line":6,
                      "offset":140
                   },
                   "start":{
                      "col":28,
                      "line":6,
                      "offset":139
                   }
                }
             },
             "severity":"WARNING"
          },
          "path":"/tmp/b7e98c65-5d2f-4fba-9d06-485708620d5c/examples/tutorial/flaskr/templates/blog/index.html",
          "start":{
             "col":5,
             "line":6,
             "offset":116
          }
       },
       {
          "check_id":"javascript.express.security.audit.xss.mustache.var-in-href.var-in-href",
          "end":{
             "col":88,
             "line":19,
             "offset":609
          },
          "extra":{
             "engine_kind":"OSS",
             "fingerprint":"d08a6f9b90f5f535c35e30b9f038594cb777b8b1eb11af48075b564c3b37419c1cb93e0478d1272aa127881c31540ff1ecc0743610ca5bfcec60880a33ef1f30_1",
             "is_ignored":false,
             "lines":"          <a class=\"action\" href=\"{{ url_for('blog.update', id=post['id']) }}\">Edit</a>",
             "message":"Detected a template variable used in an anchor tag with the 'href' attribute. This allows a malicious actor to input the 'javascript:' URI and is subject to cross- site scripting (XSS) attacks. If using a relative URL, start with a literal forward slash and concatenate the URL, like this: href='/{{link}}'. You may also consider setting the Content Security Policy (CSP) header.",
             "metadata":{
                "category":"security",
                "confidence":"LOW",
                "cwe":[
                   "CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"
                ],
                "cwe2021-top25":true,
                "cwe2022-top25":true,
                "impact":"MEDIUM",
                "license":"Commons Clause License Condition v1.0[LGPL-2.1-only]",
                "likelihood":"LOW",
                "owasp":[
                   "A07:2017 - Cross-Site Scripting (XSS)",
                   "A03:2021 - Injection"
                ],
                "references":[
                   "https://flask.palletsprojects.com/en/1.1.x/security/#cross-site-scripting-xss#:~:text=javascript:%20URI",
                   "https://github.com/pugjs/pug/issues/2952"
                ],
                "semgrep.dev":{
                   "rule":{
                      "origin":"community",
                      "rule_id":"AbUzlj",
                      "url":"https://semgrep.dev/playground/r/jQT95n/javascript.express.security.audit.xss.mustache.var-in-href.var-in-href",
                      "version_id":"jQT95n"
                   }
                },
                "shortlink":"https://sg.run/8yOq",
                "source":"https://semgrep.dev/r/javascript.express.security.audit.xss.mustache.var-in-href.var-in-href",
                "subcategory":[
                   "audit"
                ],
                "technology":[
                   "express"
                ]
             },
             "metavars":{
                "$1":{
                   "abstract_content":"\"",
                   "end":{
                      "col":35,
                      "line":19,
                      "offset":556
                   },
                   "start":{
                      "col":34,
                      "line":19,
                      "offset":555
                   }
                }
             },
             "severity":"WARNING"
          },
          "path":"/tmp/b7e98c65-5d2f-4fba-9d06-485708620d5c/examples/tutorial/flaskr/templates/blog/index.html",
          "start":{
             "col":11,
             "line":19,
             "offset":532
          }
       },
       {
          "check_id":"python.flask.security.audit.secure-set-cookie.secure-set-cookie",
          "end":{
             "col":41,
             "line":1892,
             "offset":52109
          },
          "extra":{
             "engine_kind":"OSS",
             "fingerprint":"7c8c0e4da7fa92e4270eafdff88f741894d01b5a54eb40e77e838ea286389bdb49ba36c5657948110fe6cac8cc5d21d25b528958b1838cef0b5ce30c7720b0fc_0",
             "is_ignored":false,
             "lines":"        r.set_cookie(\"foo\", \"bar\" * 100)",
             "message":"Found a Flask cookie without secure, httponly, or samesite correctly set. Flask cookies should be handled securely by setting secure=True, httponly=True, and samesite='Lax' in response.set_cookie(...). If these parameters are not properly set, your cookies are not properly protected and are at risk of being stolen by an attacker. Include the 'secure=True', 'httponly=True', samesite='Lax' arguments or set these to be true in the Flask configuration.",
             "metadata":{
                "category":"security",
                "confidence":"LOW",
                "cwe":[
                   "CWE-614: Sensitive Cookie in HTTPS Session Without 'Secure' Attribute"
                ],
                "impact":"LOW",
                "license":"Commons Clause License Condition v1.0[LGPL-2.1-only]",
                "likelihood":"LOW",
                "owasp":[
                   "A05:2021 - Security Misconfiguration"
                ],
                "references":[
                   "https://blog.r2c.dev/2020/bento-check-keeping-cookies-safe-in-flask/",
                   "https://bento.dev/checks/flask/secure-set-cookie/",
                   "https://flask.palletsprojects.com/en/1.1.x/security/#set-cookie-options"
                ],
                "semgrep.dev":{
                   "rule":{
                      "origin":"community",
                      "rule_id":"GdU7GR",
                      "url":"https://semgrep.dev/playground/r/zyTex2/python.flask.security.audit.secure-set-cookie.secure-set-cookie",
                      "version_id":"zyTex2"
                   }
                },
                "shortlink":"https://sg.run/gLkZ",
                "source":"https://semgrep.dev/r/python.flask.security.audit.secure-set-cookie.secure-set-cookie",
                "subcategory":[
                   "audit"
                ],
                "technology":[
                   "flask"
                ]
             },
             "metavars":{
                "$RESP":{
                   "abstract_content":"response",
                   "end":{
                      "col":13,
                      "line":1881,
                      "offset":51736
                   },
                   "start":{
                      "col":5,
                      "line":1881,
                      "offset":51728
                   }
                },
                "$RESPONSE":{
                   "abstract_content":"r",
                   "end":{
                      "col":10,
                      "line":1892,
                      "offset":52078
                   },
                   "propagated_value":{
                      "svalue_abstract_content":"flask.Response(\"\"status 204)",
                      "svalue_end":{
                         "col":43,
                         "line":1891,
                         "offset":52068
                      },
                      "svalue_start":{
                         "col":13,
                         "line":1891,
                         "offset":52038
                      }
                   },
                   "start":{
                      "col":9,
                      "line":1892,
                      "offset":52077
                   }
                }
             },
             "severity":"WARNING"
          },
          "path":"/tmp/b7e98c65-5d2f-4fba-9d06-485708620d5c/tests/test_basic.py",
          "start":{
             "col":9,
             "line":1892,
             "offset":52077
          }
       },
       {
          "check_id":"python.lang.security.audit.eval-detected.eval-detected",
          "end":{
             "col":58,
             "line":963,
             "offset":30762
          },
          "extra":{
             "engine_kind":"OSS",
             "fingerprint":"78b08ecf04ca0a540c67aad5d411d65f64685fed775b1b297d6b09d771dfbc61d009ef99089f360ad8d45fd1ef261e0784bf95ecbadf8b6327ec01ddcd3a621b_0",
             "is_ignored":false,
             "lines":"            eval(compile(f.read(), startup, \"exec\"), ctx)",
             "message":"Detected the use of eval(). eval() can be dangerous if used to evaluate dynamic content. If this content can be input from outside the program, this may be a code injection vulnerability. Ensure evaluated content is not definable by external sources.",
             "metadata":{
                "asvs":{
                   "control_id":"5.2.4 Dyanmic Code Execution Features",
                   "control_url":"https://github.com/OWASP/ASVS/blob/master/4.0/en/0x13-V5-Validation-Sanitization-Encoding.md#v52-sanitization-and-sandboxing-requirements",
                   "section":"V5: Validation, Sanitization and Encoding Verification Requirements",
                   "version":"4"
                },
                "category":"security",
                "confidence":"LOW",
                "cwe":[
                   "CWE-95: Improper Neutralization of Directives in Dynamically Evaluated Code ('Eval Injection')"
                ],
                "impact":"HIGH",
                "license":"Commons Clause License Condition v1.0[LGPL-2.1-only]",
                "likelihood":"LOW",
                "owasp":[
                   "A03:2021 - Injection"
                ],
                "references":[
                   "https://owasp.org/Top10/A03_2021-Injection"
                ],
                "semgrep.dev":{
                   "rule":{
                      "origin":"community",
                      "rule_id":"gxU149",
                      "url":"https://semgrep.dev/playground/r/O9TZ0D/python.lang.security.audit.eval-detected.eval-detected",
                      "version_id":"O9TZ0D"
                   }
                },
                "shortlink":"https://sg.run/ZvrD",
                "source":"https://semgrep.dev/r/python.lang.security.audit.eval-detected.eval-detected",
                "source-rule-url":"https://bandit.readthedocs.io/en/latest/blacklists/blacklist_calls.html#b307-eval",
                "subcategory":[
                   "audit"
                ],
                "technology":[
                   "python"
                ]
             },
             "metavars":{
                
             },
             "severity":"WARNING"
          },
          "path":"/tmp/b7e98c65-5d2f-4fba-9d06-485708620d5c/src/flask/cli.py",
          "start":{
             "col":13,
             "line":963,
             "offset":30717
          }
       },
       {
          "check_id":"python.lang.security.audit.exec-detected.exec-detected",
          "end":{
             "col":80,
             "line":185,
             "offset":6871
          },
          "extra":{
             "engine_kind":"OSS",
             "fingerprint":"a43aa74fc77aca8a9d3f0d015aa9a6f88b8c27b9ca72d50962b141eef3930766a6f043bc1b46ad80f6ea9abdfd4e071531ac95988718304832e5ed0e92c87678_0",
             "is_ignored":false,
             "lines":"                exec(compile(config_file.read(), filename, \"exec\"), d.__dict__)",
             "message":"Detected the use of exec(). exec() can be dangerous if used to evaluate dynamic content. If this content can be input from outside the program, this may be a code injection vulnerability. Ensure evaluated content is not definable by external sources.",
             "metadata":{
                "asvs":{
                   "control_id":"5.2.4 Dyanmic Code Execution Features",
                   "control_url":"https://github.com/OWASP/ASVS/blob/master/4.0/en/0x13-V5-Validation-Sanitization-Encoding.md#v52-sanitization-and-sandboxing-requirements",
                   "section":"V5: Validation, Sanitization and Encoding Verification Requirements",
                   "version":"4"
                },
                "category":"security",
                "confidence":"LOW",
                "cwe":[
                   "CWE-95: Improper Neutralization of Directives in Dynamically Evaluated Code ('Eval Injection')"
                ],
                "impact":"HIGH",
                "license":"Commons Clause License Condition v1.0[LGPL-2.1-only]",
                "likelihood":"LOW",
                "owasp":[
                   "A03:2021 - Injection"
                ],
                "references":[
                   "https://owasp.org/Top10/A03_2021-Injection"
                ],
                "semgrep.dev":{
                   "rule":{
                      "origin":"community",
                      "rule_id":"QrUzKv",
                      "url":"https://semgrep.dev/playground/r/e1TAdz/python.lang.security.audit.exec-detected.exec-detected",
                      "version_id":"e1TAdz"
                   }
                },
                "shortlink":"https://sg.run/ndRX",
                "source":"https://semgrep.dev/r/python.lang.security.audit.exec-detected.exec-detected",
                "source-rule-url":"https://bandit.readthedocs.io/en/latest/plugins/b102_exec_used.html",
                "subcategory":[
                   "audit"
                ],
                "technology":[
                   "python"
                ]
             },
             "metavars":{
                
             },
             "severity":"WARNING"
          },
          "path":"/tmp/b7e98c65-5d2f-4fba-9d06-485708620d5c/src/flask/config.py",
          "start":{
             "col":17,
             "line":185,
             "offset":6808
          }
       },
       {
          "check_id":"python.flask.security.audit.hardcoded-config.avoid_hardcoded_config_TESTING",
          "end":{
             "col":6,
             "line":52,
             "offset":1421
          },
          "extra":{
             "engine_kind":"OSS",
             "fingerprint":"a980ad8459e0e0f7beed676068f17cce4c693ce820687837f809120366e67715f73ee951ca145496933411ec59541d4689033162e2d8e335c6bca91d9e227753_0",
             "is_ignored":false,
             "lines":"    app.config.update(\n        TESTING=True,\n        SECRET_KEY=\"test key\",\n    )",
             "message":"Hardcoded variable `TESTING` detected. Use environment variables or config files instead",
             "metadata":{
                "category":"security",
                "confidence":"LOW",
                "cwe":[
                   "CWE-489: Active Debug Code"
                ],
                "impact":"LOW",
                "license":"Commons Clause License Condition v1.0[LGPL-2.1-only]",
                "likelihood":"LOW",
                "owasp":[
                   "A05:2021 - Security Misconfiguration"
                ],
                "references":[
                   "https://bento.dev/checks/flask/avoid-hardcoded-config/",
                   "https://flask.palletsprojects.com/en/1.1.x/config/?highlight=configuration#builtin-configuration-values",
                   "https://flask.palletsprojects.com/en/1.1.x/config/?highlight=configuration#environment-and-debug-features"
                ],
                "semgrep.dev":{
                   "rule":{
                      "origin":"community",
                      "rule_id":"3qUPoy",
                      "url":"https://semgrep.dev/playground/r/l4TANl/python.flask.security.audit.hardcoded-config.avoid_hardcoded_config_TESTING",
                      "version_id":"l4TANl"
                   }
                },
                "shortlink":"https://sg.run/ndZ2",
                "source":"https://semgrep.dev/r/python.flask.security.audit.hardcoded-config.avoid_hardcoded_config_TESTING",
                "subcategory":[
                   "audit"
                ],
                "technology":[
                   "flask"
                ]
             },
             "metavars":{
                "$M":{
                   "abstract_content":"app.config",
                   "end":{
                      "col":15,
                      "line":49,
                      "offset":1354
                   },
                   "start":{
                      "col":5,
                      "line":49,
                      "offset":1344
                   }
                }
             },
             "severity":"WARNING"
          },
          "path":"/tmp/b7e98c65-5d2f-4fba-9d06-485708620d5c/tests/conftest.py",
          "start":{
             "col":5,
             "line":49,
             "offset":1344
          }
       },
       {
          "check_id":"python.flask.security.audit.hardcoded-config.avoid_hardcoded_config_DEBUG",
          "end":{
             "col":27,
             "line":4,
             "offset":73
          },
          "extra":{
             "engine_kind":"OSS",
             "fingerprint":"11629afc45a369d6bf73ac59569d286bdfe791070fac0e1ab3a0bd943e4317d8fdd13fb29fd493b891b888b5df245f77542bd6257fc753a909d863db9c6b5cc8_0",
             "is_ignored":false,
             "lines":"app.config[\"DEBUG\"] = True",
             "message":"Hardcoded variable `DEBUG` detected. Set this by using FLASK_DEBUG environment variable",
             "metadata":{
                "category":"security",
                "confidence":"LOW",
                "cwe":[
                   "CWE-489: Active Debug Code"
                ],
                "impact":"LOW",
                "license":"Commons Clause License Condition v1.0[LGPL-2.1-only]",
                "likelihood":"LOW",
                "owasp":[
                   "A05:2021 - Security Misconfiguration"
                ],
                "references":[
                   "https://bento.dev/checks/flask/avoid-hardcoded-config/",
                   "https://flask.palletsprojects.com/en/1.1.x/config/?highlight=configuration#builtin-configuration-values",
                   "https://flask.palletsprojects.com/en/1.1.x/config/?highlight=configuration#environment-and-debug-features"
                ],
                "semgrep.dev":{
                   "rule":{
                      "origin":"community",
                      "rule_id":"JDUyJR",
                      "url":"https://semgrep.dev/playground/r/o5Tp5z/python.flask.security.audit.hardcoded-config.avoid_hardcoded_config_DEBUG",
                      "version_id":"o5Tp5z"
                   }
                },
                "shortlink":"https://sg.run/LwPo",
                "source":"https://semgrep.dev/r/python.flask.security.audit.hardcoded-config.avoid_hardcoded_config_DEBUG",
                "subcategory":[
                   "audit"
                ],
                "technology":[
                   "flask"
                ]
             },
             "metavars":{
                "$M":{
                   "abstract_content":"app",
                   "end":{
                      "col":4,
                      "line":4,
                      "offset":50
                   },
                   "start":{
                      "col":1,
                      "line":4,
                      "offset":47
                   }
                }
             },
             "severity":"WARNING"
          },
          "path":"/tmp/b7e98c65-5d2f-4fba-9d06-485708620d5c/tests/test_apps/blueprintapp/__init__.py",
          "start":{
             "col":1,
             "line":4,
             "offset":47
          }
       },
       {
          "check_id":"python.flask.security.audit.hardcoded-config.avoid_hardcoded_config_DEBUG",
          "end":{
             "col":31,
             "line":1669,
             "offset":45413
          },
          "extra":{
             "engine_kind":"OSS",
             "fingerprint":"796018f1c163cdba8808acaa8b0708964a446e650dc5b7fe40854334a356e60e8f129d0552b2a48d757d2b40c77b55d4276256876b9d6c36b11ab8365e04e814_0",
             "is_ignored":false,
             "lines":"    app.config[\"DEBUG\"] = True",
             "message":"Hardcoded variable `DEBUG` detected. Set this by using FLASK_DEBUG environment variable",
             "metadata":{
                "category":"security",
                "confidence":"LOW",
                "cwe":[
                   "CWE-489: Active Debug Code"
                ],
                "impact":"LOW",
                "license":"Commons Clause License Condition v1.0[LGPL-2.1-only]",
                "likelihood":"LOW",
                "owasp":[
                   "A05:2021 - Security Misconfiguration"
                ],
                "references":[
                   "https://bento.dev/checks/flask/avoid-hardcoded-config/",
                   "https://flask.palletsprojects.com/en/1.1.x/config/?highlight=configuration#builtin-configuration-values",
                   "https://flask.palletsprojects.com/en/1.1.x/config/?highlight=configuration#environment-and-debug-features"
                ],
                "semgrep.dev":{
                   "rule":{
                      "origin":"community",
                      "rule_id":"JDUyJR",
                      "url":"https://semgrep.dev/playground/r/o5Tp5z/python.flask.security.audit.hardcoded-config.avoid_hardcoded_config_DEBUG",
                      "version_id":"o5Tp5z"
                   }
                },
                "shortlink":"https://sg.run/LwPo",
                "source":"https://semgrep.dev/r/python.flask.security.audit.hardcoded-config.avoid_hardcoded_config_DEBUG",
                "subcategory":[
                   "audit"
                ],
                "technology":[
                   "flask"
                ]
             },
             "metavars":{
                "$M":{
                   "abstract_content":"app",
                   "end":{
                      "col":8,
                      "line":1669,
                      "offset":45390
                   },
                   "start":{
                      "col":5,
                      "line":1669,
                      "offset":45387
                   }
                }
             },
             "severity":"WARNING"
          },
          "path":"/tmp/b7e98c65-5d2f-4fba-9d06-485708620d5c/tests/test_basic.py",
          "start":{
             "col":5,
             "line":1669,
             "offset":45387
          }
       },
       {
          "check_id":"python.flask.security.audit.hardcoded-config.avoid_hardcoded_config_DEBUG",
          "end":{
             "col":31,
             "line":379,
             "offset":9967
          },
          "extra":{
             "engine_kind":"OSS",
             "fingerprint":"5bdb839c355cd547d87717a534a0e027fbe19085abbe01083a3048a511fb4e8bc703aa31784065b89b41663215e12aa7cca0bf5eac35104d8110218fe8da7afb_0",
             "is_ignored":false,
             "lines":"    app.config[\"DEBUG\"] = True",
             "message":"Hardcoded variable `DEBUG` detected. Set this by using FLASK_DEBUG environment variable",
             "metadata":{
                "category":"security",
                "confidence":"LOW",
                "cwe":[
                   "CWE-489: Active Debug Code"
                ],
                "impact":"LOW",
                "license":"Commons Clause License Condition v1.0[LGPL-2.1-only]",
                "likelihood":"LOW",
                "owasp":[
                   "A05:2021 - Security Misconfiguration"
                ],
                "references":[
                   "https://bento.dev/checks/flask/avoid-hardcoded-config/",
                   "https://flask.palletsprojects.com/en/1.1.x/config/?highlight=configuration#builtin-configuration-values",
                   "https://flask.palletsprojects.com/en/1.1.x/config/?highlight=configuration#environment-and-debug-features"
                ],
                "semgrep.dev":{
                   "rule":{
                      "origin":"community",
                      "rule_id":"JDUyJR",
                      "url":"https://semgrep.dev/playground/r/o5Tp5z/python.flask.security.audit.hardcoded-config.avoid_hardcoded_config_DEBUG",
                      "version_id":"o5Tp5z"
                   }
                },
                "shortlink":"https://sg.run/LwPo",
                "source":"https://semgrep.dev/r/python.flask.security.audit.hardcoded-config.avoid_hardcoded_config_DEBUG",
                "subcategory":[
                   "audit"
                ],
                "technology":[
                   "flask"
                ]
             },
             "metavars":{
                "$M":{
                   "abstract_content":"app",
                   "end":{
                      "col":8,
                      "line":379,
                      "offset":9944
                   },
                   "start":{
                      "col":5,
                      "line":379,
                      "offset":9941
                   }
                }
             },
             "severity":"WARNING"
          },
          "path":"/tmp/b7e98c65-5d2f-4fba-9d06-485708620d5c/tests/test_templating.py",
          "start":{
             "col":5,
             "line":379,
             "offset":9941
          }
       },
       {
          "check_id":"python.flask.security.audit.hardcoded-config.avoid_hardcoded_config_DEBUG",
          "end":{
             "col":31,
             "line":384,
             "offset":10174
          },
          "extra":{
             "engine_kind":"OSS",
             "fingerprint":"5bdb839c355cd547d87717a534a0e027fbe19085abbe01083a3048a511fb4e8bc703aa31784065b89b41663215e12aa7cca0bf5eac35104d8110218fe8da7afb_1",
             "is_ignored":false,
             "lines":"    app.config[\"DEBUG\"] = True",
             "message":"Hardcoded variable `DEBUG` detected. Set this by using FLASK_DEBUG environment variable",
             "metadata":{
                "category":"security",
                "confidence":"LOW",
                "cwe":[
                   "CWE-489: Active Debug Code"
                ],
                "impact":"LOW",
                "license":"Commons Clause License Condition v1.0[LGPL-2.1-only]",
                "likelihood":"LOW",
                "owasp":[
                   "A05:2021 - Security Misconfiguration"
                ],
                "references":[
                   "https://bento.dev/checks/flask/avoid-hardcoded-config/",
                   "https://flask.palletsprojects.com/en/1.1.x/config/?highlight=configuration#builtin-configuration-values",
                   "https://flask.palletsprojects.com/en/1.1.x/config/?highlight=configuration#environment-and-debug-features"
                ],
                "semgrep.dev":{
                   "rule":{
                      "origin":"community",
                      "rule_id":"JDUyJR",
                      "url":"https://semgrep.dev/playground/r/o5Tp5z/python.flask.security.audit.hardcoded-config.avoid_hardcoded_config_DEBUG",
                      "version_id":"o5Tp5z"
                   }
                },
                "shortlink":"https://sg.run/LwPo",
                "source":"https://semgrep.dev/r/python.flask.security.audit.hardcoded-config.avoid_hardcoded_config_DEBUG",
                "subcategory":[
                   "audit"
                ],
                "technology":[
                   "flask"
                ]
             },
             "metavars":{
                "$M":{
                   "abstract_content":"app",
                   "end":{
                      "col":8,
                      "line":384,
                      "offset":10151
                   },
                   "start":{
                      "col":5,
                      "line":384,
                      "offset":10148
                   }
                }
             },
             "severity":"WARNING"
          },
          "path":"/tmp/b7e98c65-5d2f-4fba-9d06-485708620d5c/tests/test_templating.py",
          "start":{
             "col":5,
             "line":384,
             "offset":10148
          }
       },
       {
          "check_id":"python.flask.security.audit.hardcoded-config.avoid_hardcoded_config_DEBUG",
          "end":{
             "col":31,
             "line":389,
             "offset":10374
          },
          "extra":{
             "engine_kind":"OSS",
             "fingerprint":"5bdb839c355cd547d87717a534a0e027fbe19085abbe01083a3048a511fb4e8bc703aa31784065b89b41663215e12aa7cca0bf5eac35104d8110218fe8da7afb_2",
             "is_ignored":false,
             "lines":"    app.config[\"DEBUG\"] = True",
             "message":"Hardcoded variable `DEBUG` detected. Set this by using FLASK_DEBUG environment variable",
             "metadata":{
                "category":"security",
                "confidence":"LOW",
                "cwe":[
                   "CWE-489: Active Debug Code"
                ],
                "impact":"LOW",
                "license":"Commons Clause License Condition v1.0[LGPL-2.1-only]",
                "likelihood":"LOW",
                "owasp":[
                   "A05:2021 - Security Misconfiguration"
                ],
                "references":[
                   "https://bento.dev/checks/flask/avoid-hardcoded-config/",
                   "https://flask.palletsprojects.com/en/1.1.x/config/?highlight=configuration#builtin-configuration-values",
                   "https://flask.palletsprojects.com/en/1.1.x/config/?highlight=configuration#environment-and-debug-features"
                ],
                "semgrep.dev":{
                   "rule":{
                      "origin":"community",
                      "rule_id":"JDUyJR",
                      "url":"https://semgrep.dev/playground/r/o5Tp5z/python.flask.security.audit.hardcoded-config.avoid_hardcoded_config_DEBUG",
                      "version_id":"o5Tp5z"
                   }
                },
                "shortlink":"https://sg.run/LwPo",
                "source":"https://semgrep.dev/r/python.flask.security.audit.hardcoded-config.avoid_hardcoded_config_DEBUG",
                "subcategory":[
                   "audit"
                ],
                "technology":[
                   "flask"
                ]
             },
             "metavars":{
                "$M":{
                   "abstract_content":"app",
                   "end":{
                      "col":8,
                      "line":389,
                      "offset":10351
                   },
                   "start":{
                      "col":5,
                      "line":389,
                      "offset":10348
                   }
                }
             },
             "severity":"WARNING"
          },
          "path":"/tmp/b7e98c65-5d2f-4fba-9d06-485708620d5c/tests/test_templating.py",
          "start":{
             "col":5,
             "line":389,
             "offset":10348
          }
       },
       {
          "check_id":"python.django.security.audit.xss.html-magic-method.html-magic-method",
          "end":{
             "col":33,
             "line":362,
             "offset":9203
          },
          "extra":{
             "engine_kind":"OSS",
             "fingerprint":"b0a390403f914e445c244cd9133f76c32a5927b7f3e089bb7b5fb6ca5dff1f422b911d6e63623de525f1c565ce2fcb559d18f359a1085aa6b16f64d22234bbed_0",
             "is_ignored":false,
             "lines":"        def __html__(self):\n            return \"<p>test</p>\"",
             "message":"The `__html__` method indicates to the Django template engine that the value is 'safe' for rendering. This means that normal HTML escaping will not be applied to the return value. This exposes your application to cross-site scripting (XSS) vulnerabilities. If you need to render raw HTML, consider instead using `mark_safe()` which more clearly marks the intent to render raw HTML than a class with a magic method.",
             "metadata":{
                "category":"security",
                "confidence":"LOW",
                "cwe":[
                   "CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"
                ],
                "cwe2021-top25":true,
                "cwe2022-top25":true,
                "impact":"MEDIUM",
                "license":"Commons Clause License Condition v1.0[LGPL-2.1-only]",
                "likelihood":"LOW",
                "owasp":[
                   "A07:2017 - Cross-Site Scripting (XSS)",
                   "A03:2021 - Injection"
                ],
                "references":[
                   "https://docs.djangoproject.com/en/3.0/_modules/django/utils/html/#conditional_escape",
                   "https://gist.github.com/minusworld/7885d8a81dba3ea2d1e4b8fd3c218ef5"
                ],
                "semgrep.dev":{
                   "rule":{
                      "origin":"community",
                      "rule_id":"GdU7QO",
                      "url":"https://semgrep.dev/playground/r/rxT8ZW/python.django.security.audit.xss.html-magic-method.html-magic-method",
                      "version_id":"rxT8ZW"
                   }
                },
                "shortlink":"https://sg.run/8y9N",
                "source":"https://semgrep.dev/r/python.django.security.audit.xss.html-magic-method.html-magic-method",
                "subcategory":[
                   "audit"
                ],
                "technology":[
                   "django"
                ]
             },
             "metavars":{
                "$CLASS":{
                   "abstract_content":"ObjectWithHTML",
                   "end":{
                      "col":25,
                      "line":360,
                      "offset":9141
                   },
                   "start":{
                      "col":11,
                      "line":360,
                      "offset":9127
                   }
                }
             },
             "severity":"WARNING"
          },
          "path":"/tmp/b7e98c65-5d2f-4fba-9d06-485708620d5c/tests/test_json.py",
          "start":{
             "col":9,
             "line":361,
             "offset":9151
          }
       },
       {
          "check_id":"python.django.security.audit.xss.template-href-var.template-href-var",
          "end":{
             "col":49,
             "line":17,
             "offset":657
          },
          "extra":{
             "engine_kind":"OSS",
             "fingerprint":"f5d93abaaa117c087885ba111f91de924af218f6a1750a126ddab9110b4f0e88bee3e5de8e44cbac7f1f078233576bb189d57fdf67e0007f1a014f97173a72f1_0",
             "is_ignored":false,
             "lines":"    <a href=\"{{ url_for('index', js='fetch') }}\">Fetch</a>",
             "message":"Detected a template variable used in an anchor tag with the 'href' attribute. This allows a malicious actor to input the 'javascript:' URI and is subject to cross- site scripting (XSS) attacks. Use the 'url' template tag to safely generate a URL. You may also consider setting the Content Security Policy (CSP) header.",
             "metadata":{
                "category":"security",
                "confidence":"LOW",
                "cwe":[
                   "CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"
                ],
                "cwe2021-top25":true,
                "cwe2022-top25":true,
                "impact":"MEDIUM",
                "license":"Commons Clause License Condition v1.0[LGPL-2.1-only]",
                "likelihood":"LOW",
                "owasp":[
                   "A07:2017 - Cross-Site Scripting (XSS)",
                   "A03:2021 - Injection"
                ],
                "references":[
                   "https://flask.palletsprojects.com/en/1.1.x/security/#cross-site-scripting-xss",
                   "https://docs.djangoproject.com/en/3.1/ref/templates/builtins/#url",
                   "https://content-security-policy.com/"
                ],
                "semgrep.dev":{
                   "rule":{
                      "origin":"community",
                      "rule_id":"DbUpDg",
                      "url":"https://semgrep.dev/playground/r/w8T0Zb/python.django.security.audit.xss.template-href-var.template-href-var",
                      "version_id":"w8T0Zb"
                   }
                },
                "shortlink":"https://sg.run/4x25",
                "source":"https://semgrep.dev/r/python.django.security.audit.xss.template-href-var.template-href-var",
                "subcategory":[
                   "audit"
                ],
                "technology":[
                   "django"
                ]
             },
             "metavars":{
                
             },
             "severity":"WARNING"
          },
          "path":"/tmp/b7e98c65-5d2f-4fba-9d06-485708620d5c/examples/javascript/js_example/templates/base.html",
          "start":{
             "col":8,
             "line":17,
             "offset":616
          }
       },
       {
          "check_id":"python.django.security.audit.xss.template-href-var.template-href-var",
          "end":{
             "col":47,
             "line":19,
             "offset":767
          },
          "extra":{
             "engine_kind":"OSS",
             "fingerprint":"f5d93abaaa117c087885ba111f91de924af218f6a1750a126ddab9110b4f0e88bee3e5de8e44cbac7f1f078233576bb189d57fdf67e0007f1a014f97173a72f1_1",
             "is_ignored":false,
             "lines":"    <a href=\"{{ url_for('index', js='xhr') }}\">XHR</a>",
             "message":"Detected a template variable used in an anchor tag with the 'href' attribute. This allows a malicious actor to input the 'javascript:' URI and is subject to cross- site scripting (XSS) attacks. Use the 'url' template tag to safely generate a URL. You may also consider setting the Content Security Policy (CSP) header.",
             "metadata":{
                "category":"security",
                "confidence":"LOW",
                "cwe":[
                   "CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"
                ],
                "cwe2021-top25":true,
                "cwe2022-top25":true,
                "impact":"MEDIUM",
                "license":"Commons Clause License Condition v1.0[LGPL-2.1-only]",
                "likelihood":"LOW",
                "owasp":[
                   "A07:2017 - Cross-Site Scripting (XSS)",
                   "A03:2021 - Injection"
                ],
                "references":[
                   "https://flask.palletsprojects.com/en/1.1.x/security/#cross-site-scripting-xss",
                   "https://docs.djangoproject.com/en/3.1/ref/templates/builtins/#url",
                   "https://content-security-policy.com/"
                ],
                "semgrep.dev":{
                   "rule":{
                      "origin":"community",
                      "rule_id":"DbUpDg",
                      "url":"https://semgrep.dev/playground/r/w8T0Zb/python.django.security.audit.xss.template-href-var.template-href-var",
                      "version_id":"w8T0Zb"
                   }
                },
                "shortlink":"https://sg.run/4x25",
                "source":"https://semgrep.dev/r/python.django.security.audit.xss.template-href-var.template-href-var",
                "subcategory":[
                   "audit"
                ],
                "technology":[
                   "django"
                ]
             },
             "metavars":{
                
             },
             "severity":"WARNING"
          },
          "path":"/tmp/b7e98c65-5d2f-4fba-9d06-485708620d5c/examples/javascript/js_example/templates/base.html",
          "start":{
             "col":8,
             "line":19,
             "offset":728
          }
       },
       {
          "check_id":"python.django.security.audit.xss.template-href-var.template-href-var",
          "end":{
             "col":50,
             "line":21,
             "offset":881
          },
          "extra":{
             "engine_kind":"OSS",
             "fingerprint":"f5d93abaaa117c087885ba111f91de924af218f6a1750a126ddab9110b4f0e88bee3e5de8e44cbac7f1f078233576bb189d57fdf67e0007f1a014f97173a72f1_2",
             "is_ignored":false,
             "lines":"    <a href=\"{{ url_for('index', js='jquery') }}\">jQuery</a>",
             "message":"Detected a template variable used in an anchor tag with the 'href' attribute. This allows a malicious actor to input the 'javascript:' URI and is subject to cross- site scripting (XSS) attacks. Use the 'url' template tag to safely generate a URL. You may also consider setting the Content Security Policy (CSP) header.",
             "metadata":{
                "category":"security",
                "confidence":"LOW",
                "cwe":[
                   "CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"
                ],
                "cwe2021-top25":true,
                "cwe2022-top25":true,
                "impact":"MEDIUM",
                "license":"Commons Clause License Condition v1.0[LGPL-2.1-only]",
                "likelihood":"LOW",
                "owasp":[
                   "A07:2017 - Cross-Site Scripting (XSS)",
                   "A03:2021 - Injection"
                ],
                "references":[
                   "https://flask.palletsprojects.com/en/1.1.x/security/#cross-site-scripting-xss",
                   "https://docs.djangoproject.com/en/3.1/ref/templates/builtins/#url",
                   "https://content-security-policy.com/"
                ],
                "semgrep.dev":{
                   "rule":{
                      "origin":"community",
                      "rule_id":"DbUpDg",
                      "url":"https://semgrep.dev/playground/r/w8T0Zb/python.django.security.audit.xss.template-href-var.template-href-var",
                      "version_id":"w8T0Zb"
                   }
                },
                "shortlink":"https://sg.run/4x25",
                "source":"https://semgrep.dev/r/python.django.security.audit.xss.template-href-var.template-href-var",
                "subcategory":[
                   "audit"
                ],
                "technology":[
                   "django"
                ]
             },
             "metavars":{
                
             },
             "severity":"WARNING"
          },
          "path":"/tmp/b7e98c65-5d2f-4fba-9d06-485708620d5c/examples/javascript/js_example/templates/base.html",
          "start":{
             "col":8,
             "line":21,
             "offset":839
          }
       },
       {
          "check_id":"python.django.security.audit.xss.template-href-var.template-href-var",
          "end":{
             "col":47,
             "line":7,
             "offset":320
          },
          "extra":{
             "engine_kind":"OSS",
             "fingerprint":"e7a371e2010cc092c076c5c042ea8b2f6b043294b748e92b01f37f499590cd1e90a2d43477ecd2dd146a1cb1149b422a18302f5fd01c66d82715bb214f4372b5_0",
             "is_ignored":false,
             "lines":"  <a href=\"{{ url_for(\"index\", js=\"fetch\") }}\"><code>fetch</code></a>.",
             "message":"Detected a template variable used in an anchor tag with the 'href' attribute. This allows a malicious actor to input the 'javascript:' URI and is subject to cross- site scripting (XSS) attacks. Use the 'url' template tag to safely generate a URL. You may also consider setting the Content Security Policy (CSP) header.",
             "metadata":{
                "category":"security",
                "confidence":"LOW",
                "cwe":[
                   "CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"
                ],
                "cwe2021-top25":true,
                "cwe2022-top25":true,
                "impact":"MEDIUM",
                "license":"Commons Clause License Condition v1.0[LGPL-2.1-only]",
                "likelihood":"LOW",
                "owasp":[
                   "A07:2017 - Cross-Site Scripting (XSS)",
                   "A03:2021 - Injection"
                ],
                "references":[
                   "https://flask.palletsprojects.com/en/1.1.x/security/#cross-site-scripting-xss",
                   "https://docs.djangoproject.com/en/3.1/ref/templates/builtins/#url",
                   "https://content-security-policy.com/"
                ],
                "semgrep.dev":{
                   "rule":{
                      "origin":"community",
                      "rule_id":"DbUpDg",
                      "url":"https://semgrep.dev/playground/r/w8T0Zb/python.django.security.audit.xss.template-href-var.template-href-var",
                      "version_id":"w8T0Zb"
                   }
                },
                "shortlink":"https://sg.run/4x25",
                "source":"https://semgrep.dev/r/python.django.security.audit.xss.template-href-var.template-href-var",
                "subcategory":[
                   "audit"
                ],
                "technology":[
                   "django"
                ]
             },
             "metavars":{
                
             },
             "severity":"WARNING"
          },
          "path":"/tmp/b7e98c65-5d2f-4fba-9d06-485708620d5c/examples/javascript/js_example/templates/xhr.html",
          "start":{
             "col":6,
             "line":7,
             "offset":279
          }
       },
       {
          "check_id":"python.django.security.audit.xss.template-href-var.template-href-var",
          "end":{
             "col":39,
             "line":5,
             "offset":193
          },
          "extra":{
             "engine_kind":"OSS",
             "fingerprint":"65b6108dd3c0bf55a598bd12a7f3154fb23cdbd57f2fb92859d655f31fd1534e7221e7b47c86f8886bcb0aefe1f8b7ed7ee5415b22f6023a13876abda0ae53fe_0",
             "is_ignored":false,
             "lines":"  <h1><a href=\"{{ url_for('index') }}\">Flaskr</a></h1>",
             "message":"Detected a template variable used in an anchor tag with the 'href' attribute. This allows a malicious actor to input the 'javascript:' URI and is subject to cross- site scripting (XSS) attacks. Use the 'url' template tag to safely generate a URL. You may also consider setting the Content Security Policy (CSP) header.",
             "metadata":{
                "category":"security",
                "confidence":"LOW",
                "cwe":[
                   "CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"
                ],
                "cwe2021-top25":true,
                "cwe2022-top25":true,
                "impact":"MEDIUM",
                "license":"Commons Clause License Condition v1.0[LGPL-2.1-only]",
                "likelihood":"LOW",
                "owasp":[
                   "A07:2017 - Cross-Site Scripting (XSS)",
                   "A03:2021 - Injection"
                ],
                "references":[
                   "https://flask.palletsprojects.com/en/1.1.x/security/#cross-site-scripting-xss",
                   "https://docs.djangoproject.com/en/3.1/ref/templates/builtins/#url",
                   "https://content-security-policy.com/"
                ],
                "semgrep.dev":{
                   "rule":{
                      "origin":"community",
                      "rule_id":"DbUpDg",
                      "url":"https://semgrep.dev/playground/r/w8T0Zb/python.django.security.audit.xss.template-href-var.template-href-var",
                      "version_id":"w8T0Zb"
                   }
                },
                "shortlink":"https://sg.run/4x25",
                "source":"https://semgrep.dev/r/python.django.security.audit.xss.template-href-var.template-href-var",
                "subcategory":[
                   "audit"
                ],
                "technology":[
                   "django"
                ]
             },
             "metavars":{
                
             },
             "severity":"WARNING"
          },
          "path":"/tmp/b7e98c65-5d2f-4fba-9d06-485708620d5c/examples/tutorial/flaskr/templates/base.html",
          "start":{
             "col":10,
             "line":5,
             "offset":164
          }
       },
       {
          "check_id":"python.django.security.audit.xss.template-href-var.template-href-var",
          "end":{
             "col":49,
             "line":9,
             "offset":333
          },
          "extra":{
             "engine_kind":"OSS",
             "fingerprint":"65b6108dd3c0bf55a598bd12a7f3154fb23cdbd57f2fb92859d655f31fd1534e7221e7b47c86f8886bcb0aefe1f8b7ed7ee5415b22f6023a13876abda0ae53fe_1",
             "is_ignored":false,
             "lines":"      <li><a href=\"{{ url_for('auth.logout') }}\">Log Out</a>",
             "message":"Detected a template variable used in an anchor tag with the 'href' attribute. This allows a malicious actor to input the 'javascript:' URI and is subject to cross- site scripting (XSS) attacks. Use the 'url' template tag to safely generate a URL. You may also consider setting the Content Security Policy (CSP) header.",
             "metadata":{
                "category":"security",
                "confidence":"LOW",
                "cwe":[
                   "CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"
                ],
                "cwe2021-top25":true,
                "cwe2022-top25":true,
                "impact":"MEDIUM",
                "license":"Commons Clause License Condition v1.0[LGPL-2.1-only]",
                "likelihood":"LOW",
                "owasp":[
                   "A07:2017 - Cross-Site Scripting (XSS)",
                   "A03:2021 - Injection"
                ],
                "references":[
                   "https://flask.palletsprojects.com/en/1.1.x/security/#cross-site-scripting-xss",
                   "https://docs.djangoproject.com/en/3.1/ref/templates/builtins/#url",
                   "https://content-security-policy.com/"
                ],
                "semgrep.dev":{
                   "rule":{
                      "origin":"community",
                      "rule_id":"DbUpDg",
                      "url":"https://semgrep.dev/playground/r/w8T0Zb/python.django.security.audit.xss.template-href-var.template-href-var",
                      "version_id":"w8T0Zb"
                   }
                },
                "shortlink":"https://sg.run/4x25",
                "source":"https://semgrep.dev/r/python.django.security.audit.xss.template-href-var.template-href-var",
                "subcategory":[
                   "audit"
                ],
                "technology":[
                   "django"
                ]
             },
             "metavars":{
                
             },
             "severity":"WARNING"
          },
          "path":"/tmp/b7e98c65-5d2f-4fba-9d06-485708620d5c/examples/tutorial/flaskr/templates/base.html",
          "start":{
             "col":14,
             "line":9,
             "offset":298
          }
       },
       {
          "check_id":"python.django.security.audit.xss.template-href-var.template-href-var",
          "end":{
             "col":51,
             "line":11,
             "offset":411
          },
          "extra":{
             "engine_kind":"OSS",
             "fingerprint":"65b6108dd3c0bf55a598bd12a7f3154fb23cdbd57f2fb92859d655f31fd1534e7221e7b47c86f8886bcb0aefe1f8b7ed7ee5415b22f6023a13876abda0ae53fe_2",
             "is_ignored":false,
             "lines":"      <li><a href=\"{{ url_for('auth.register') }}\">Register</a>",
             "message":"Detected a template variable used in an anchor tag with the 'href' attribute. This allows a malicious actor to input the 'javascript:' URI and is subject to cross- site scripting (XSS) attacks. Use the 'url' template tag to safely generate a URL. You may also consider setting the Content Security Policy (CSP) header.",
             "metadata":{
                "category":"security",
                "confidence":"LOW",
                "cwe":[
                   "CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"
                ],
                "cwe2021-top25":true,
                "cwe2022-top25":true,
                "impact":"MEDIUM",
                "license":"Commons Clause License Condition v1.0[LGPL-2.1-only]",
                "likelihood":"LOW",
                "owasp":[
                   "A07:2017 - Cross-Site Scripting (XSS)",
                   "A03:2021 - Injection"
                ],
                "references":[
                   "https://flask.palletsprojects.com/en/1.1.x/security/#cross-site-scripting-xss",
                   "https://docs.djangoproject.com/en/3.1/ref/templates/builtins/#url",
                   "https://content-security-policy.com/"
                ],
                "semgrep.dev":{
                   "rule":{
                      "origin":"community",
                      "rule_id":"DbUpDg",
                      "url":"https://semgrep.dev/playground/r/w8T0Zb/python.django.security.audit.xss.template-href-var.template-href-var",
                      "version_id":"w8T0Zb"
                   }
                },
                "shortlink":"https://sg.run/4x25",
                "source":"https://semgrep.dev/r/python.django.security.audit.xss.template-href-var.template-href-var",
                "subcategory":[
                   "audit"
                ],
                "technology":[
                   "django"
                ]
             },
             "metavars":{
                
             },
             "severity":"WARNING"
          },
          "path":"/tmp/b7e98c65-5d2f-4fba-9d06-485708620d5c/examples/tutorial/flaskr/templates/base.html",
          "start":{
             "col":14,
             "line":11,
             "offset":374
          }
       },
       {
          "check_id":"python.django.security.audit.xss.template-href-var.template-href-var",
          "end":{
             "col":48,
             "line":12,
             "offset":472
          },
          "extra":{
             "engine_kind":"OSS",
             "fingerprint":"65b6108dd3c0bf55a598bd12a7f3154fb23cdbd57f2fb92859d655f31fd1534e7221e7b47c86f8886bcb0aefe1f8b7ed7ee5415b22f6023a13876abda0ae53fe_3",
             "is_ignored":false,
             "lines":"      <li><a href=\"{{ url_for('auth.login') }}\">Log In</a>",
             "message":"Detected a template variable used in an anchor tag with the 'href' attribute. This allows a malicious actor to input the 'javascript:' URI and is subject to cross- site scripting (XSS) attacks. Use the 'url' template tag to safely generate a URL. You may also consider setting the Content Security Policy (CSP) header.",
             "metadata":{
                "category":"security",
                "confidence":"LOW",
                "cwe":[
                   "CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"
                ],
                "cwe2021-top25":true,
                "cwe2022-top25":true,
                "impact":"MEDIUM",
                "license":"Commons Clause License Condition v1.0[LGPL-2.1-only]",
                "likelihood":"LOW",
                "owasp":[
                   "A07:2017 - Cross-Site Scripting (XSS)",
                   "A03:2021 - Injection"
                ],
                "references":[
                   "https://flask.palletsprojects.com/en/1.1.x/security/#cross-site-scripting-xss",
                   "https://docs.djangoproject.com/en/3.1/ref/templates/builtins/#url",
                   "https://content-security-policy.com/"
                ],
                "semgrep.dev":{
                   "rule":{
                      "origin":"community",
                      "rule_id":"DbUpDg",
                      "url":"https://semgrep.dev/playground/r/w8T0Zb/python.django.security.audit.xss.template-href-var.template-href-var",
                      "version_id":"w8T0Zb"
                   }
                },
                "shortlink":"https://sg.run/4x25",
                "source":"https://semgrep.dev/r/python.django.security.audit.xss.template-href-var.template-href-var",
                "subcategory":[
                   "audit"
                ],
                "technology":[
                   "django"
                ]
             },
             "metavars":{
                
             },
             "severity":"WARNING"
          },
          "path":"/tmp/b7e98c65-5d2f-4fba-9d06-485708620d5c/examples/tutorial/flaskr/templates/base.html",
          "start":{
             "col":14,
             "line":12,
             "offset":438
          }
       },
       {
          "check_id":"python.django.security.audit.xss.template-href-var.template-href-var",
          "end":{
             "col":58,
             "line":6,
             "offset":169
          },
          "extra":{
             "engine_kind":"OSS",
             "fingerprint":"59f814e5667bd438defb6aac3fdd283c636577a01f41b7bc62ced36bdd254e70699611287e0eebdf336b277023289f29b0d545a3bde65c3bfed82d44c8359cd0_0",
             "is_ignored":false,
             "lines":"    <a class=\"action\" href=\"{{ url_for('blog.create') }}\">New</a>",
             "message":"Detected a template variable used in an anchor tag with the 'href' attribute. This allows a malicious actor to input the 'javascript:' URI and is subject to cross- site scripting (XSS) attacks. Use the 'url' template tag to safely generate a URL. You may also consider setting the Content Security Policy (CSP) header.",
             "metadata":{
                "category":"security",
                "confidence":"LOW",
                "cwe":[
                   "CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"
                ],
                "cwe2021-top25":true,
                "cwe2022-top25":true,
                "impact":"MEDIUM",
                "license":"Commons Clause License Condition v1.0[LGPL-2.1-only]",
                "likelihood":"LOW",
                "owasp":[
                   "A07:2017 - Cross-Site Scripting (XSS)",
                   "A03:2021 - Injection"
                ],
                "references":[
                   "https://flask.palletsprojects.com/en/1.1.x/security/#cross-site-scripting-xss",
                   "https://docs.djangoproject.com/en/3.1/ref/templates/builtins/#url",
                   "https://content-security-policy.com/"
                ],
                "semgrep.dev":{
                   "rule":{
                      "origin":"community",
                      "rule_id":"DbUpDg",
                      "url":"https://semgrep.dev/playground/r/w8T0Zb/python.django.security.audit.xss.template-href-var.template-href-var",
                      "version_id":"w8T0Zb"
                   }
                },
                "shortlink":"https://sg.run/4x25",
                "source":"https://semgrep.dev/r/python.django.security.audit.xss.template-href-var.template-href-var",
                "subcategory":[
                   "audit"
                ],
                "technology":[
                   "django"
                ]
             },
             "metavars":{
                
             },
             "severity":"WARNING"
          },
          "path":"/tmp/b7e98c65-5d2f-4fba-9d06-485708620d5c/examples/tutorial/flaskr/templates/blog/index.html",
          "start":{
             "col":23,
             "line":6,
             "offset":134
          }
       },
       {
          "check_id":"python.django.security.audit.xss.template-href-var.template-href-var",
          "end":{
             "col":79,
             "line":19,
             "offset":600
          },
          "extra":{
             "engine_kind":"OSS",
             "fingerprint":"59f814e5667bd438defb6aac3fdd283c636577a01f41b7bc62ced36bdd254e70699611287e0eebdf336b277023289f29b0d545a3bde65c3bfed82d44c8359cd0_1",
             "is_ignored":false,
             "lines":"          <a class=\"action\" href=\"{{ url_for('blog.update', id=post['id']) }}\">Edit</a>",
             "message":"Detected a template variable used in an anchor tag with the 'href' attribute. This allows a malicious actor to input the 'javascript:' URI and is subject to cross- site scripting (XSS) attacks. Use the 'url' template tag to safely generate a URL. You may also consider setting the Content Security Policy (CSP) header.",
             "metadata":{
                "category":"security",
                "confidence":"LOW",
                "cwe":[
                   "CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"
                ],
                "cwe2021-top25":true,
                "cwe2022-top25":true,
                "impact":"MEDIUM",
                "license":"Commons Clause License Condition v1.0[LGPL-2.1-only]",
                "likelihood":"LOW",
                "owasp":[
                   "A07:2017 - Cross-Site Scripting (XSS)",
                   "A03:2021 - Injection"
                ],
                "references":[
                   "https://flask.palletsprojects.com/en/1.1.x/security/#cross-site-scripting-xss",
                   "https://docs.djangoproject.com/en/3.1/ref/templates/builtins/#url",
                   "https://content-security-policy.com/"
                ],
                "semgrep.dev":{
                   "rule":{
                      "origin":"community",
                      "rule_id":"DbUpDg",
                      "url":"https://semgrep.dev/playground/r/w8T0Zb/python.django.security.audit.xss.template-href-var.template-href-var",
                      "version_id":"w8T0Zb"
                   }
                },
                "shortlink":"https://sg.run/4x25",
                "source":"https://semgrep.dev/r/python.django.security.audit.xss.template-href-var.template-href-var",
                "subcategory":[
                   "audit"
                ],
                "technology":[
                   "django"
                ]
             },
             "metavars":{
                
             },
             "severity":"WARNING"
          },
          "path":"/tmp/b7e98c65-5d2f-4fba-9d06-485708620d5c/examples/tutorial/flaskr/templates/blog/index.html",
          "start":{
             "col":29,
             "line":19,
             "offset":550
          }
       },
       {
          "check_id":"python.flask.security.unescaped-template-extension.unescaped-template-extension",
          "end":{
             "col":10,
             "line":98,
             "offset":2282
          },
          "extra":{
             "engine_kind":"OSS",
             "fingerprint":"cb30db494c0fbeab19e0981c2ff4cec32bfe6b4ba0e69975b0a5bee9d832cd6f353a968410fa77a5668b5e51c31d9ca4f8887633fbb19bed667d9397961b1977_0",
             "is_ignored":false,
             "lines":"        return flask.render_template(\n            \"non_escaping_template.txt\", text=text, html=Markup(text)\n        )",
             "message":"Flask does not automatically escape Jinja templates unless they have .html, .htm, .xml, or .xhtml extensions. This could lead to XSS attacks. Use .html, .htm, .xml, or .xhtml for your template extensions. See https://flask.palletsprojects.com/en/1.1.x/templating/#jinja-setup for more information.",
             "metadata":{
                "category":"security",
                "confidence":"LOW",
                "cwe":[
                   "CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"
                ],
                "cwe2021-top25":true,
                "cwe2022-top25":true,
                "impact":"MEDIUM",
                "license":"Commons Clause License Condition v1.0[LGPL-2.1-only]",
                "likelihood":"LOW",
                "owasp":[
                   "A07:2017 - Cross-Site Scripting (XSS)",
                   "A03:2021 - Injection"
                ],
                "references":[
                   "https://flask.palletsprojects.com/en/1.1.x/templating/#jinja-setup",
                   "https://blog.r2c.dev/2020/bento-check-unescaped-template-extensions-in-flask/",
                   "https://bento.dev/checks/flask/unescaped-file-extension/"
                ],
                "semgrep.dev":{
                   "rule":{
                      "origin":"community",
                      "rule_id":"EwU293",
                      "url":"https://semgrep.dev/playground/r/nWTw7p/python.flask.security.unescaped-template-extension.unescaped-template-extension",
                      "version_id":"nWTw7p"
                   }
                },
                "shortlink":"https://sg.run/x1Rg",
                "source":"https://semgrep.dev/r/python.flask.security.unescaped-template-extension.unescaped-template-extension",
                "source-rule-url":"https://pypi.org/project/flake8-flask/",
                "subcategory":[
                   "audit"
                ],
                "technology":[
                   "flask"
                ]
             },
             "metavars":{
                
             },
             "severity":"WARNING"
          },
          "path":"/tmp/b7e98c65-5d2f-4fba-9d06-485708620d5c/tests/test_templating.py",
          "start":{
             "col":16,
             "line":96,
             "offset":2180
          }
       },
       {
          "check_id":"python.flask.security.unescaped-template-extension.unescaped-template-extension",
          "end":{
             "col":59,
             "line":115,
             "offset":2800
          },
          "extra":{
             "engine_kind":"OSS",
             "fingerprint":"cb30db494c0fbeab19e0981c2ff4cec32bfe6b4ba0e69975b0a5bee9d832cd6f353a968410fa77a5668b5e51c31d9ca4f8887633fbb19bed667d9397961b1977_1",
             "is_ignored":false,
             "lines":"    assert flask.render_template(\"mail.txt\", foo=\"<test>\") == \"<test> Mail\"",
             "message":"Flask does not automatically escape Jinja templates unless they have .html, .htm, .xml, or .xhtml extensions. This could lead to XSS attacks. Use .html, .htm, .xml, or .xhtml for your template extensions. See https://flask.palletsprojects.com/en/1.1.x/templating/#jinja-setup for more information.",
             "metadata":{
                "category":"security",
                "confidence":"LOW",
                "cwe":[
                   "CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"
                ],
                "cwe2021-top25":true,
                "cwe2022-top25":true,
                "impact":"MEDIUM",
                "license":"Commons Clause License Condition v1.0[LGPL-2.1-only]",
                "likelihood":"LOW",
                "owasp":[
                   "A07:2017 - Cross-Site Scripting (XSS)",
                   "A03:2021 - Injection"
                ],
                "references":[
                   "https://flask.palletsprojects.com/en/1.1.x/templating/#jinja-setup",
                   "https://blog.r2c.dev/2020/bento-check-unescaped-template-extensions-in-flask/",
                   "https://bento.dev/checks/flask/unescaped-file-extension/"
                ],
                "semgrep.dev":{
                   "rule":{
                      "origin":"community",
                      "rule_id":"EwU293",
                      "url":"https://semgrep.dev/playground/r/nWTw7p/python.flask.security.unescaped-template-extension.unescaped-template-extension",
                      "version_id":"nWTw7p"
                   }
                },
                "shortlink":"https://sg.run/x1Rg",
                "source":"https://semgrep.dev/r/python.flask.security.unescaped-template-extension.unescaped-template-extension",
                "source-rule-url":"https://pypi.org/project/flake8-flask/",
                "subcategory":[
                   "audit"
                ],
                "technology":[
                   "flask"
                ]
             },
             "metavars":{
                
             },
             "severity":"WARNING"
          },
          "path":"/tmp/b7e98c65-5d2f-4fba-9d06-485708620d5c/tests/test_templating.py",
          "start":{
             "col":12,
             "line":115,
             "offset":2753
          }
       },
       {
          "check_id":"python.flask.security.xss.audit.template-autoescape-off.template-autoescape-off",
          "end":{
             "col":23,
             "line":3,
             "offset":44
          },
          "extra":{
             "engine_kind":"OSS",
             "fingerprint":"e93841965122cc1ae9315323ae3cf748d9df6257901e81ea3858bd2695b54590d4fe04d731b7b1e7699cf3bb61861e997fbd8db0dcf5217cd947d9d67f2d0f76_0",
             "is_ignored":false,
             "lines":"{% autoescape false %}{{ text }}",
             "message":"Detected a segment of a Flask template where autoescaping is explicitly disabled with '{% autoescape off %}'. This allows rendering of raw HTML in this segment. Ensure no user data is rendered here, otherwise this is a cross-site scripting (XSS) vulnerability, or turn autoescape on.",
             "metadata":{
                "category":"security",
                "confidence":"LOW",
                "cwe":[
                   "CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"
                ],
                "cwe2021-top25":true,
                "cwe2022-top25":true,
                "impact":"MEDIUM",
                "license":"Commons Clause License Condition v1.0[LGPL-2.1-only]",
                "likelihood":"LOW",
                "owasp":[
                   "A07:2017 - Cross-Site Scripting (XSS)",
                   "A03:2021 - Injection"
                ],
                "references":[
                   "https://flask.palletsprojects.com/en/1.1.x/templating/#controlling-autoescaping",
                   "https://flask.palletsprojects.com/en/1.1.x/templating/#jinja-setup"
                ],
                "semgrep.dev":{
                   "rule":{
                      "origin":"community",
                      "rule_id":"YGURo6",
                      "url":"https://semgrep.dev/playground/r/8KTLbN/python.flask.security.xss.audit.template-autoescape-off.template-autoescape-off",
                      "version_id":"8KTLbN"
                   }
                },
                "shortlink":"https://sg.run/Bkn2",
                "source":"https://semgrep.dev/r/python.flask.security.xss.audit.template-autoescape-off.template-autoescape-off",
                "subcategory":[
                   "audit"
                ],
                "technology":[
                   "flask"
                ]
             },
             "metavars":{
                
             },
             "severity":"WARNING"
          },
          "path":"/tmp/b7e98c65-5d2f-4fba-9d06-485708620d5c/tests/templates/escaping_template.html",
          "start":{
             "col":1,
             "line":3,
             "offset":22
          }
       },
       {
          "check_id":"python.lang.security.audit.hardcoded-password-default-argument.hardcoded-password-default-argument",
          "end":{
             "col":10,
             "line":54,
             "offset":1315
          },
          "extra":{
             "engine_kind":"OSS",
             "fingerprint":"c4c33c795b43ae7aeb8eff1a062656cf70fface13a28b2e5b58ef8e6394cfeb3659cf2893a151352879f0afea957f2ea591bd3aae9aed875df76e5c3785f2122_0",
             "is_ignored":false,
             "lines":"    def login(self, username=\"test\", password=\"test\"):\n        return self._client.post(\n            \"/auth/login\", data={\"username\": username, \"password\": password}\n        )",
             "message":"Hardcoded password is used as a default argument to 'login'. This could be dangerous if a real password is not supplied.",
             "metadata":{
                "category":"security",
                "confidence":"LOW",
                "cwe":[
                   "CWE-798: Use of Hard-coded Credentials"
                ],
                "cwe2021-top25":true,
                "cwe2022-top25":true,
                "impact":"MEDIUM",
                "license":"Commons Clause License Condition v1.0[LGPL-2.1-only]",
                "likelihood":"LOW",
                "owasp":[
                   "A07:2021 - Identification and Authentication Failures"
                ],
                "references":[
                   "https://owasp.org/Top10/A07_2021-Identification_and_Authentication_Failures"
                ],
                "semgrep.dev":{
                   "rule":{
                      "origin":"community",
                      "rule_id":"PeUZAW",
                      "url":"https://semgrep.dev/playground/r/ZRTyEe/python.lang.security.audit.hardcoded-password-default-argument.hardcoded-password-default-argument",
                      "version_id":"ZRTyEe"
                   }
                },
                "shortlink":"https://sg.run/Lw9r",
                "source":"https://semgrep.dev/r/python.lang.security.audit.hardcoded-password-default-argument.hardcoded-password-default-argument",
                "subcategory":[
                   "audit"
                ],
                "technology":[
                   "python"
                ]
             },
             "metavars":{
                "$FUNC":{
                   "abstract_content":"login",
                   "end":{
                      "col":14,
                      "line":51,
                      "offset":1153
                   },
                   "start":{
                      "col":9,
                      "line":51,
                      "offset":1148
                   }
                }
             },
             "severity":"WARNING"
          },
          "path":"/tmp/b7e98c65-5d2f-4fba-9d06-485708620d5c/examples/tutorial/tests/conftest.py",
          "start":{
             "col":5,
             "line":51,
             "offset":1144
          }
       },
       {
          "check_id":"python.flask.security.xss.audit.explicit-unescape-with-markup.explicit-unescape-with-markup",
          "end":{
             "col":29,
             "line":185,
             "offset":5276
          },
          "extra":{
             "engine_kind":"OSS",
             "fingerprint":"cc2f0330f78330dc50f9961243f72cd99a845d9ccc24234dea62ce5e3e30a1521774f548eb05d4f6363d71ac7df438ba59518e36b072ac9265a762a4468d6fbe_0",
             "is_ignored":false,
             "lines":"        return Markup(value)",
             "message":"Detected explicitly unescaped content using 'Markup()'. This permits the unescaped data to include unescaped HTML which could result in cross-site scripting. Ensure this data is not externally controlled, or consider rewriting to not use 'Markup()'.",
             "metadata":{
                "category":"security",
                "confidence":"LOW",
                "cwe":[
                   "CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"
                ],
                "cwe2021-top25":true,
                "cwe2022-top25":true,
                "impact":"MEDIUM",
                "license":"Commons Clause License Condition v1.0[LGPL-2.1-only]",
                "likelihood":"LOW",
                "owasp":[
                   "A07:2017 - Cross-Site Scripting (XSS)",
                   "A03:2021 - Injection"
                ],
                "references":[
                   "https://tedboy.github.io/flask/generated/generated/flask.Markup.html"
                ],
                "semgrep.dev":{
                   "rule":{
                      "origin":"community",
                      "rule_id":"lBU95l",
                      "url":"https://semgrep.dev/playground/r/LjTp0k/python.flask.security.xss.audit.explicit-unescape-with-markup.explicit-unescape-with-markup",
                      "version_id":"LjTp0k"
                   }
                },
                "shortlink":"https://sg.run/AvZ8",
                "source":"https://semgrep.dev/r/python.flask.security.xss.audit.explicit-unescape-with-markup.explicit-unescape-with-markup",
                "subcategory":[
                   "audit"
                ],
                "technology":[
                   "flask"
                ]
             },
             "metavars":{
                
             },
             "severity":"WARNING"
          },
          "path":"/tmp/b7e98c65-5d2f-4fba-9d06-485708620d5c/src/flask/json/tag.py",
          "start":{
             "col":16,
             "line":185,
             "offset":5263
          }
       },
       {
          "check_id":"python.flask.security.xss.audit.explicit-unescape-with-markup.explicit-unescape-with-markup",
          "end":{
             "col":46,
             "line":476,
             "offset":13592
          },
          "extra":{
             "engine_kind":"OSS",
             "fingerprint":"6630fea6445ba7fa816c3ebfd9e16fa1b57fc2dd041d8848754ec59f11a4f50e36a4421eab7924a546423fd859300fd3dfb09da0eaae9dfab520626f4f7d2a21_0",
             "is_ignored":false,
             "lines":"        flask.session[\"m\"] = Markup(\"<html>\")",
             "message":"Detected explicitly unescaped content using 'Markup()'. This permits the unescaped data to include unescaped HTML which could result in cross-site scripting. Ensure this data is not externally controlled, or consider rewriting to not use 'Markup()'.",
             "metadata":{
                "category":"security",
                "confidence":"LOW",
                "cwe":[
                   "CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"
                ],
                "cwe2021-top25":true,
                "cwe2022-top25":true,
                "impact":"MEDIUM",
                "license":"Commons Clause License Condition v1.0[LGPL-2.1-only]",
                "likelihood":"LOW",
                "owasp":[
                   "A07:2017 - Cross-Site Scripting (XSS)",
                   "A03:2021 - Injection"
                ],
                "references":[
                   "https://tedboy.github.io/flask/generated/generated/flask.Markup.html"
                ],
                "semgrep.dev":{
                   "rule":{
                      "origin":"community",
                      "rule_id":"lBU95l",
                      "url":"https://semgrep.dev/playground/r/LjTp0k/python.flask.security.xss.audit.explicit-unescape-with-markup.explicit-unescape-with-markup",
                      "version_id":"LjTp0k"
                   }
                },
                "shortlink":"https://sg.run/AvZ8",
                "source":"https://semgrep.dev/r/python.flask.security.xss.audit.explicit-unescape-with-markup.explicit-unescape-with-markup",
                "subcategory":[
                   "audit"
                ],
                "technology":[
                   "flask"
                ]
             },
             "metavars":{
                
             },
             "severity":"WARNING"
          },
          "path":"/tmp/b7e98c65-5d2f-4fba-9d06-485708620d5c/tests/test_basic.py",
          "start":{
             "col":30,
             "line":476,
             "offset":13576
          }
       },
       {
          "check_id":"python.flask.security.xss.audit.explicit-unescape-with-markup.explicit-unescape-with-markup",
          "end":{
             "col":42,
             "line":491,
             "offset":14110
          },
          "extra":{
             "engine_kind":"OSS",
             "fingerprint":"6630fea6445ba7fa816c3ebfd9e16fa1b57fc2dd041d8848754ec59f11a4f50e36a4421eab7924a546423fd859300fd3dfb09da0eaae9dfab520626f4f7d2a21_1",
             "is_ignored":false,
             "lines":"        assert s[\"m\"] == Markup(\"<html>\")",
             "message":"Detected explicitly unescaped content using 'Markup()'. This permits the unescaped data to include unescaped HTML which could result in cross-site scripting. Ensure this data is not externally controlled, or consider rewriting to not use 'Markup()'.",
             "metadata":{
                "category":"security",
                "confidence":"LOW",
                "cwe":[
                   "CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"
                ],
                "cwe2021-top25":true,
                "cwe2022-top25":true,
                "impact":"MEDIUM",
                "license":"Commons Clause License Condition v1.0[LGPL-2.1-only]",
                "likelihood":"LOW",
                "owasp":[
                   "A07:2017 - Cross-Site Scripting (XSS)",
                   "A03:2021 - Injection"
                ],
                "references":[
                   "https://tedboy.github.io/flask/generated/generated/flask.Markup.html"
                ],
                "semgrep.dev":{
                   "rule":{
                      "origin":"community",
                      "rule_id":"lBU95l",
                      "url":"https://semgrep.dev/playground/r/LjTp0k/python.flask.security.xss.audit.explicit-unescape-with-markup.explicit-unescape-with-markup",
                      "version_id":"LjTp0k"
                   }
                },
                "shortlink":"https://sg.run/AvZ8",
                "source":"https://semgrep.dev/r/python.flask.security.xss.audit.explicit-unescape-with-markup.explicit-unescape-with-markup",
                "subcategory":[
                   "audit"
                ],
                "technology":[
                   "flask"
                ]
             },
             "metavars":{
                
             },
             "severity":"WARNING"
          },
          "path":"/tmp/b7e98c65-5d2f-4fba-9d06-485708620d5c/tests/test_basic.py",
          "start":{
             "col":26,
             "line":491,
             "offset":14094
          }
       },
       {
          "check_id":"python.flask.security.xss.audit.explicit-unescape-with-markup.explicit-unescape-with-markup",
          "end":{
             "col":47,
             "line":615,
             "offset":17748
          },
          "extra":{
             "engine_kind":"OSS",
             "fingerprint":"6630fea6445ba7fa816c3ebfd9e16fa1b57fc2dd041d8848754ec59f11a4f50e36a4421eab7924a546423fd859300fd3dfb09da0eaae9dfab520626f4f7d2a21_2",
             "is_ignored":false,
             "lines":"        flask.flash(Markup(\"<em>Testing</em>\"), \"warning\")",
             "message":"Detected explicitly unescaped content using 'Markup()'. This permits the unescaped data to include unescaped HTML which could result in cross-site scripting. Ensure this data is not externally controlled, or consider rewriting to not use 'Markup()'.",
             "metadata":{
                "category":"security",
                "confidence":"LOW",
                "cwe":[
                   "CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"
                ],
                "cwe2021-top25":true,
                "cwe2022-top25":true,
                "impact":"MEDIUM",
                "license":"Commons Clause License Condition v1.0[LGPL-2.1-only]",
                "likelihood":"LOW",
                "owasp":[
                   "A07:2017 - Cross-Site Scripting (XSS)",
                   "A03:2021 - Injection"
                ],
                "references":[
                   "https://tedboy.github.io/flask/generated/generated/flask.Markup.html"
                ],
                "semgrep.dev":{
                   "rule":{
                      "origin":"community",
                      "rule_id":"lBU95l",
                      "url":"https://semgrep.dev/playground/r/LjTp0k/python.flask.security.xss.audit.explicit-unescape-with-markup.explicit-unescape-with-markup",
                      "version_id":"LjTp0k"
                   }
                },
                "shortlink":"https://sg.run/AvZ8",
                "source":"https://semgrep.dev/r/python.flask.security.xss.audit.explicit-unescape-with-markup.explicit-unescape-with-markup",
                "subcategory":[
                   "audit"
                ],
                "technology":[
                   "flask"
                ]
             },
             "metavars":{
                
             },
             "severity":"WARNING"
          },
          "path":"/tmp/b7e98c65-5d2f-4fba-9d06-485708620d5c/tests/test_basic.py",
          "start":{
             "col":21,
             "line":615,
             "offset":17722
          }
       },
       {
          "check_id":"python.flask.security.xss.audit.explicit-unescape-with-markup.explicit-unescape-with-markup",
          "end":{
             "col":39,
             "line":624,
             "offset":17996
          },
          "extra":{
             "engine_kind":"OSS",
             "fingerprint":"6630fea6445ba7fa816c3ebfd9e16fa1b57fc2dd041d8848754ec59f11a4f50e36a4421eab7924a546423fd859300fd3dfb09da0eaae9dfab520626f4f7d2a21_3",
             "is_ignored":false,
             "lines":"            Markup(\"<em>Testing</em>\"),",
             "message":"Detected explicitly unescaped content using 'Markup()'. This permits the unescaped data to include unescaped HTML which could result in cross-site scripting. Ensure this data is not externally controlled, or consider rewriting to not use 'Markup()'.",
             "metadata":{
                "category":"security",
                "confidence":"LOW",
                "cwe":[
                   "CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"
                ],
                "cwe2021-top25":true,
                "cwe2022-top25":true,
                "impact":"MEDIUM",
                "license":"Commons Clause License Condition v1.0[LGPL-2.1-only]",
                "likelihood":"LOW",
                "owasp":[
                   "A07:2017 - Cross-Site Scripting (XSS)",
                   "A03:2021 - Injection"
                ],
                "references":[
                   "https://tedboy.github.io/flask/generated/generated/flask.Markup.html"
                ],
                "semgrep.dev":{
                   "rule":{
                      "origin":"community",
                      "rule_id":"lBU95l",
                      "url":"https://semgrep.dev/playground/r/LjTp0k/python.flask.security.xss.audit.explicit-unescape-with-markup.explicit-unescape-with-markup",
                      "version_id":"LjTp0k"
                   }
                },
                "shortlink":"https://sg.run/AvZ8",
                "source":"https://semgrep.dev/r/python.flask.security.xss.audit.explicit-unescape-with-markup.explicit-unescape-with-markup",
                "subcategory":[
                   "audit"
                ],
                "technology":[
                   "flask"
                ]
             },
             "metavars":{
                
             },
             "severity":"WARNING"
          },
          "path":"/tmp/b7e98c65-5d2f-4fba-9d06-485708620d5c/tests/test_basic.py",
          "start":{
             "col":13,
             "line":624,
             "offset":17970
          }
       },
       {
          "check_id":"python.flask.security.xss.audit.explicit-unescape-with-markup.explicit-unescape-with-markup",
          "end":{
             "col":51,
             "line":635,
             "offset":18365
          },
          "extra":{
             "engine_kind":"OSS",
             "fingerprint":"6630fea6445ba7fa816c3ebfd9e16fa1b57fc2dd041d8848754ec59f11a4f50e36a4421eab7924a546423fd859300fd3dfb09da0eaae9dfab520626f4f7d2a21_4",
             "is_ignored":false,
             "lines":"            (\"warning\", Markup(\"<em>Testing</em>\")),",
             "message":"Detected explicitly unescaped content using 'Markup()'. This permits the unescaped data to include unescaped HTML which could result in cross-site scripting. Ensure this data is not externally controlled, or consider rewriting to not use 'Markup()'.",
             "metadata":{
                "category":"security",
                "confidence":"LOW",
                "cwe":[
                   "CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"
                ],
                "cwe2021-top25":true,
                "cwe2022-top25":true,
                "impact":"MEDIUM",
                "license":"Commons Clause License Condition v1.0[LGPL-2.1-only]",
                "likelihood":"LOW",
                "owasp":[
                   "A07:2017 - Cross-Site Scripting (XSS)",
                   "A03:2021 - Injection"
                ],
                "references":[
                   "https://tedboy.github.io/flask/generated/generated/flask.Markup.html"
                ],
                "semgrep.dev":{
                   "rule":{
                      "origin":"community",
                      "rule_id":"lBU95l",
                      "url":"https://semgrep.dev/playground/r/LjTp0k/python.flask.security.xss.audit.explicit-unescape-with-markup.explicit-unescape-with-markup",
                      "version_id":"LjTp0k"
                   }
                },
                "shortlink":"https://sg.run/AvZ8",
                "source":"https://semgrep.dev/r/python.flask.security.xss.audit.explicit-unescape-with-markup.explicit-unescape-with-markup",
                "subcategory":[
                   "audit"
                ],
                "technology":[
                   "flask"
                ]
             },
             "metavars":{
                
             },
             "severity":"WARNING"
          },
          "path":"/tmp/b7e98c65-5d2f-4fba-9d06-485708620d5c/tests/test_basic.py",
          "start":{
             "col":25,
             "line":635,
             "offset":18339
          }
       },
       {
          "check_id":"python.flask.security.xss.audit.explicit-unescape-with-markup.explicit-unescape-with-markup",
          "end":{
             "col":51,
             "line":654,
             "offset":18964
          },
          "extra":{
             "engine_kind":"OSS",
             "fingerprint":"6630fea6445ba7fa816c3ebfd9e16fa1b57fc2dd041d8848754ec59f11a4f50e36a4421eab7924a546423fd859300fd3dfb09da0eaae9dfab520626f4f7d2a21_5",
             "is_ignored":false,
             "lines":"            (\"warning\", Markup(\"<em>Testing</em>\")),",
             "message":"Detected explicitly unescaped content using 'Markup()'. This permits the unescaped data to include unescaped HTML which could result in cross-site scripting. Ensure this data is not externally controlled, or consider rewriting to not use 'Markup()'.",
             "metadata":{
                "category":"security",
                "confidence":"LOW",
                "cwe":[
                   "CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"
                ],
                "cwe2021-top25":true,
                "cwe2022-top25":true,
                "impact":"MEDIUM",
                "license":"Commons Clause License Condition v1.0[LGPL-2.1-only]",
                "likelihood":"LOW",
                "owasp":[
                   "A07:2017 - Cross-Site Scripting (XSS)",
                   "A03:2021 - Injection"
                ],
                "references":[
                   "https://tedboy.github.io/flask/generated/generated/flask.Markup.html"
                ],
                "semgrep.dev":{
                   "rule":{
                      "origin":"community",
                      "rule_id":"lBU95l",
                      "url":"https://semgrep.dev/playground/r/LjTp0k/python.flask.security.xss.audit.explicit-unescape-with-markup.explicit-unescape-with-markup",
                      "version_id":"LjTp0k"
                   }
                },
                "shortlink":"https://sg.run/AvZ8",
                "source":"https://semgrep.dev/r/python.flask.security.xss.audit.explicit-unescape-with-markup.explicit-unescape-with-markup",
                "subcategory":[
                   "audit"
                ],
                "technology":[
                   "flask"
                ]
             },
             "metavars":{
                
             },
             "severity":"WARNING"
          },
          "path":"/tmp/b7e98c65-5d2f-4fba-9d06-485708620d5c/tests/test_basic.py",
          "start":{
             "col":25,
             "line":654,
             "offset":18938
          }
       },
       {
          "check_id":"python.flask.security.xss.audit.explicit-unescape-with-markup.explicit-unescape-with-markup",
          "end":{
             "col":57,
             "line":663,
             "offset":19303
          },
          "extra":{
             "engine_kind":"OSS",
             "fingerprint":"6630fea6445ba7fa816c3ebfd9e16fa1b57fc2dd041d8848754ec59f11a4f50e36a4421eab7924a546423fd859300fd3dfb09da0eaae9dfab520626f4f7d2a21_6",
             "is_ignored":false,
             "lines":"        assert messages[1] == Markup(\"<em>Testing</em>\")",
             "message":"Detected explicitly unescaped content using 'Markup()'. This permits the unescaped data to include unescaped HTML which could result in cross-site scripting. Ensure this data is not externally controlled, or consider rewriting to not use 'Markup()'.",
             "metadata":{
                "category":"security",
                "confidence":"LOW",
                "cwe":[
                   "CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"
                ],
                "cwe2021-top25":true,
                "cwe2022-top25":true,
                "impact":"MEDIUM",
                "license":"Commons Clause License Condition v1.0[LGPL-2.1-only]",
                "likelihood":"LOW",
                "owasp":[
                   "A07:2017 - Cross-Site Scripting (XSS)",
                   "A03:2021 - Injection"
                ],
                "references":[
                   "https://tedboy.github.io/flask/generated/generated/flask.Markup.html"
                ],
                "semgrep.dev":{
                   "rule":{
                      "origin":"community",
                      "rule_id":"lBU95l",
                      "url":"https://semgrep.dev/playground/r/LjTp0k/python.flask.security.xss.audit.explicit-unescape-with-markup.explicit-unescape-with-markup",
                      "version_id":"LjTp0k"
                   }
                },
                "shortlink":"https://sg.run/AvZ8",
                "source":"https://semgrep.dev/r/python.flask.security.xss.audit.explicit-unescape-with-markup.explicit-unescape-with-markup",
                "subcategory":[
                   "audit"
                ],
                "technology":[
                   "flask"
                ]
             },
             "metavars":{
                
             },
             "severity":"WARNING"
          },
          "path":"/tmp/b7e98c65-5d2f-4fba-9d06-485708620d5c/tests/test_basic.py",
          "start":{
             "col":31,
             "line":663,
             "offset":19277
          }
       },
       {
          "check_id":"python.flask.security.xss.audit.explicit-unescape-with-markup.explicit-unescape-with-markup",
          "end":{
             "col":25,
             "line":22,
             "offset":448
          },
          "extra":{
             "engine_kind":"OSS",
             "fingerprint":"da6589772eb28927ec3c88fa3baa118ed5f4c3e3a0da4037399b23b70405808d52d26e542b22e02c39a914d3fab6120ee786f63f551a49abc7c7987515dff96f_0",
             "is_ignored":false,
             "lines":"        Markup(\"<html>\"),",
             "message":"Detected explicitly unescaped content using 'Markup()'. This permits the unescaped data to include unescaped HTML which could result in cross-site scripting. Ensure this data is not externally controlled, or consider rewriting to not use 'Markup()'.",
             "metadata":{
                "category":"security",
                "confidence":"LOW",
                "cwe":[
                   "CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"
                ],
                "cwe2021-top25":true,
                "cwe2022-top25":true,
                "impact":"MEDIUM",
                "license":"Commons Clause License Condition v1.0[LGPL-2.1-only]",
                "likelihood":"LOW",
                "owasp":[
                   "A07:2017 - Cross-Site Scripting (XSS)",
                   "A03:2021 - Injection"
                ],
                "references":[
                   "https://tedboy.github.io/flask/generated/generated/flask.Markup.html"
                ],
                "semgrep.dev":{
                   "rule":{
                      "origin":"community",
                      "rule_id":"lBU95l",
                      "url":"https://semgrep.dev/playground/r/LjTp0k/python.flask.security.xss.audit.explicit-unescape-with-markup.explicit-unescape-with-markup",
                      "version_id":"LjTp0k"
                   }
                },
                "shortlink":"https://sg.run/AvZ8",
                "source":"https://semgrep.dev/r/python.flask.security.xss.audit.explicit-unescape-with-markup.explicit-unescape-with-markup",
                "subcategory":[
                   "audit"
                ],
                "technology":[
                   "flask"
                ]
             },
             "metavars":{
                
             },
             "severity":"WARNING"
          },
          "path":"/tmp/b7e98c65-5d2f-4fba-9d06-485708620d5c/tests/test_json_tag.py",
          "start":{
             "col":9,
             "line":22,
             "offset":432
          }
       },
       {
          "check_id":"python.flask.security.xss.audit.explicit-unescape-with-markup.explicit-unescape-with-markup",
          "end":{
             "col":67,
             "line":77,
             "offset":1795
          },
          "extra":{
             "engine_kind":"OSS",
             "fingerprint":"384bc7a639ebd9be6b7449893bac8bd08635e651d72496f2a64f97030208bab6cc6c5cf073cd242f6c6e5dd8736085b99132d33c0e4fea305d40c2c68823d786_0",
             "is_ignored":false,
             "lines":"            \"escaping_template.html\", text=text, html=Markup(text)",
             "message":"Detected explicitly unescaped content using 'Markup()'. This permits the unescaped data to include unescaped HTML which could result in cross-site scripting. Ensure this data is not externally controlled, or consider rewriting to not use 'Markup()'.",
             "metadata":{
                "category":"security",
                "confidence":"LOW",
                "cwe":[
                   "CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"
                ],
                "cwe2021-top25":true,
                "cwe2022-top25":true,
                "impact":"MEDIUM",
                "license":"Commons Clause License Condition v1.0[LGPL-2.1-only]",
                "likelihood":"LOW",
                "owasp":[
                   "A07:2017 - Cross-Site Scripting (XSS)",
                   "A03:2021 - Injection"
                ],
                "references":[
                   "https://tedboy.github.io/flask/generated/generated/flask.Markup.html"
                ],
                "semgrep.dev":{
                   "rule":{
                      "origin":"community",
                      "rule_id":"lBU95l",
                      "url":"https://semgrep.dev/playground/r/LjTp0k/python.flask.security.xss.audit.explicit-unescape-with-markup.explicit-unescape-with-markup",
                      "version_id":"LjTp0k"
                   }
                },
                "shortlink":"https://sg.run/AvZ8",
                "source":"https://semgrep.dev/r/python.flask.security.xss.audit.explicit-unescape-with-markup.explicit-unescape-with-markup",
                "subcategory":[
                   "audit"
                ],
                "technology":[
                   "flask"
                ]
             },
             "metavars":{
                
             },
             "severity":"WARNING"
          },
          "path":"/tmp/b7e98c65-5d2f-4fba-9d06-485708620d5c/tests/test_templating.py",
          "start":{
             "col":55,
             "line":77,
             "offset":1783
          }
       },
       {
          "check_id":"python.flask.security.xss.audit.explicit-unescape-with-markup.explicit-unescape-with-markup",
          "end":{
             "col":70,
             "line":97,
             "offset":2272
          },
          "extra":{
             "engine_kind":"OSS",
             "fingerprint":"384bc7a639ebd9be6b7449893bac8bd08635e651d72496f2a64f97030208bab6cc6c5cf073cd242f6c6e5dd8736085b99132d33c0e4fea305d40c2c68823d786_1",
             "is_ignored":false,
             "lines":"            \"non_escaping_template.txt\", text=text, html=Markup(text)",
             "message":"Detected explicitly unescaped content using 'Markup()'. This permits the unescaped data to include unescaped HTML which could result in cross-site scripting. Ensure this data is not externally controlled, or consider rewriting to not use 'Markup()'.",
             "metadata":{
                "category":"security",
                "confidence":"LOW",
                "cwe":[
                   "CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"
                ],
                "cwe2021-top25":true,
                "cwe2022-top25":true,
                "impact":"MEDIUM",
                "license":"Commons Clause License Condition v1.0[LGPL-2.1-only]",
                "likelihood":"LOW",
                "owasp":[
                   "A07:2017 - Cross-Site Scripting (XSS)",
                   "A03:2021 - Injection"
                ],
                "references":[
                   "https://tedboy.github.io/flask/generated/generated/flask.Markup.html"
                ],
                "semgrep.dev":{
                   "rule":{
                      "origin":"community",
                      "rule_id":"lBU95l",
                      "url":"https://semgrep.dev/playground/r/LjTp0k/python.flask.security.xss.audit.explicit-unescape-with-markup.explicit-unescape-with-markup",
                      "version_id":"LjTp0k"
                   }
                },
                "shortlink":"https://sg.run/AvZ8",
                "source":"https://semgrep.dev/r/python.flask.security.xss.audit.explicit-unescape-with-markup.explicit-unescape-with-markup",
                "subcategory":[
                   "audit"
                ],
                "technology":[
                   "flask"
                ]
             },
             "metavars":{
                
             },
             "severity":"WARNING"
          },
          "path":"/tmp/b7e98c65-5d2f-4fba-9d06-485708620d5c/tests/test_templating.py",
          "start":{
             "col":58,
             "line":97,
             "offset":2260
          }
       },
       {
          "check_id":"html.security.audit.missing-integrity.missing-integrity",
          "end":{
             "col":83,
             "line":3,
             "offset":132
          },
          "extra":{
             "engine_kind":"OSS",
             "fingerprint":"72d667be4131cfa1223bbb42b36eec86ac27dbd5214a3720e967a6e01ce43a29c66828f774a042678631cf7e2bdfcadbae714fb3f0724a675364373f01c52bed_0",
             "is_ignored":false,
             "lines":"<link rel=\"stylesheet\" href=\"https://unpkg.com/normalize.css@8.0.1/normalize.css\">",
             "message":"This tag is missing an 'integrity' subresource integrity attribute. The 'integrity' attribute allows for the browser to verify that externally hosted files (for example from a CDN) are delivered without unexpected manipulation. Without this attribute, if an attacker can modify the externally hosted resource, this could lead to XSS and other types of attacks. To prevent this, include the base64-encoded cryptographic hash of the resource (file) you\u2019re telling the browser to fetch in the 'integrity' attribute for all externally hosted files.",
             "metadata":{
                "category":"security",
                "confidence":"LOW",
                "cwe":[
                   "CWE-353: Missing Support for Integrity Check"
                ],
                "impact":"LOW",
                "license":"Commons Clause License Condition v1.0[LGPL-2.1-only]",
                "likelihood":"LOW",
                "owasp":[
                   "A08:2021 - Software and Data Integrity Failures"
                ],
                "references":[
                   "https://owasp.org/Top10/A08_2021-Software_and_Data_Integrity_Failures"
                ],
                "semgrep.dev":{
                   "rule":{
                      "origin":"community",
                      "rule_id":"AbUQzj",
                      "url":"https://semgrep.dev/playground/r/pZTg2n/html.security.audit.missing-integrity.missing-integrity",
                      "version_id":"pZTg2n"
                   }
                },
                "shortlink":"https://sg.run/krXA",
                "source":"https://semgrep.dev/r/html.security.audit.missing-integrity.missing-integrity",
                "subcategory":[
                   "audit"
                ],
                "technology":[
                   "html"
                ]
             },
             "metavars":{
                "$...A":{
                   "abstract_content":" rel=\"stylesheet\" href=\"https://unpkg.com/normalize.css@8.0.1/normalize.css\"",
                   "end":{
                      "col":82,
                      "line":3,
                      "offset":131
                   },
                   "start":{
                      "col":6,
                      "line":3,
                      "offset":55
                   }
                }
             },
             "severity":"WARNING"
          },
          "path":"/tmp/b7e98c65-5d2f-4fba-9d06-485708620d5c/examples/javascript/js_example/templates/base.html",
          "start":{
             "col":1,
             "line":3,
             "offset":50
          }
       },
       {
          "check_id":"html.security.audit.missing-integrity.missing-integrity",
          "end":{
             "col":81,
             "line":4,
             "offset":213
          },
          "extra":{
             "engine_kind":"OSS",
             "fingerprint":"327774d84fcb426d9e98fc407310831d31a2656dc73b16310e8da326228f859ecec753d650facaf7e9e33b7d7141d2c90aa9e2e03da1e78b48f2717c1957dca7_0",
             "is_ignored":false,
             "lines":"<link rel=\"stylesheet\" href=\"https://unpkg.com/sakura.css@1.3.1/css/sakura.css\">",
             "message":"This tag is missing an 'integrity' subresource integrity attribute. The 'integrity' attribute allows for the browser to verify that externally hosted files (for example from a CDN) are delivered without unexpected manipulation. Without this attribute, if an attacker can modify the externally hosted resource, this could lead to XSS and other types of attacks. To prevent this, include the base64-encoded cryptographic hash of the resource (file) you\u2019re telling the browser to fetch in the 'integrity' attribute for all externally hosted files.",
             "metadata":{
                "category":"security",
                "confidence":"LOW",
                "cwe":[
                   "CWE-353: Missing Support for Integrity Check"
                ],
                "impact":"LOW",
                "license":"Commons Clause License Condition v1.0[LGPL-2.1-only]",
                "likelihood":"LOW",
                "owasp":[
                   "A08:2021 - Software and Data Integrity Failures"
                ],
                "references":[
                   "https://owasp.org/Top10/A08_2021-Software_and_Data_Integrity_Failures"
                ],
                "semgrep.dev":{
                   "rule":{
                      "origin":"community",
                      "rule_id":"AbUQzj",
                      "url":"https://semgrep.dev/playground/r/pZTg2n/html.security.audit.missing-integrity.missing-integrity",
                      "version_id":"pZTg2n"
                   }
                },
                "shortlink":"https://sg.run/krXA",
                "source":"https://semgrep.dev/r/html.security.audit.missing-integrity.missing-integrity",
                "subcategory":[
                   "audit"
                ],
                "technology":[
                   "html"
                ]
             },
             "metavars":{
                "$...A":{
                   "abstract_content":" rel=\"stylesheet\" href=\"https://unpkg.com/sakura.css@1.3.1/css/sakura.css\"",
                   "end":{
                      "col":80,
                      "line":4,
                      "offset":212
                   },
                   "start":{
                      "col":6,
                      "line":4,
                      "offset":138
                   }
                }
             },
             "severity":"WARNING"
          },
          "path":"/tmp/b7e98c65-5d2f-4fba-9d06-485708620d5c/examples/javascript/js_example/templates/base.html",
          "start":{
             "col":1,
             "line":4,
             "offset":133
          }
       },
       {
          "check_id":"html.security.audit.missing-integrity.missing-integrity",
          "end":{
             "col":70,
             "line":10,
             "offset":311
          },
          "extra":{
             "engine_kind":"OSS",
             "fingerprint":"0fd352a625d849ff328ed3fc17c8aae8eaada42594dc1bd3b8e9f997144dfd2d3ea8e9d4950634a93eadf1b4f451255c4c6931c4effe05945974095f1cdce412_0",
             "is_ignored":false,
             "lines":"  <script src=\"https://code.jquery.com/jquery-3.3.1.min.js\"></script>",
             "message":"This tag is missing an 'integrity' subresource integrity attribute. The 'integrity' attribute allows for the browser to verify that externally hosted files (for example from a CDN) are delivered without unexpected manipulation. Without this attribute, if an attacker can modify the externally hosted resource, this could lead to XSS and other types of attacks. To prevent this, include the base64-encoded cryptographic hash of the resource (file) you\u2019re telling the browser to fetch in the 'integrity' attribute for all externally hosted files.",
             "metadata":{
                "category":"security",
                "confidence":"LOW",
                "cwe":[
                   "CWE-353: Missing Support for Integrity Check"
                ],
                "impact":"LOW",
                "license":"Commons Clause License Condition v1.0[LGPL-2.1-only]",
                "likelihood":"LOW",
                "owasp":[
                   "A08:2021 - Software and Data Integrity Failures"
                ],
                "references":[
                   "https://owasp.org/Top10/A08_2021-Software_and_Data_Integrity_Failures"
                ],
                "semgrep.dev":{
                   "rule":{
                      "origin":"community",
                      "rule_id":"AbUQzj",
                      "url":"https://semgrep.dev/playground/r/pZTg2n/html.security.audit.missing-integrity.missing-integrity",
                      "version_id":"pZTg2n"
                   }
                },
                "shortlink":"https://sg.run/krXA",
                "source":"https://semgrep.dev/r/html.security.audit.missing-integrity.missing-integrity",
                "subcategory":[
                   "audit"
                ],
                "technology":[
                   "html"
                ]
             },
             "metavars":{
                "$...A":{
                   "abstract_content":" src=\"https://code.jquery.com/jquery-3.3.1.min.js\"",
                   "end":{
                      "col":60,
                      "line":10,
                      "offset":301
                   },
                   "start":{
                      "col":10,
                      "line":10,
                      "offset":251
                   }
                }
             },
             "severity":"WARNING"
          },
          "path":"/tmp/b7e98c65-5d2f-4fba-9d06-485708620d5c/examples/javascript/js_example/templates/jquery.html",
          "start":{
             "col":3,
             "line":10,
             "offset":244
          }
       },
       {
          "check_id":"python.flask.security.audit.render-template-string.render-template-string",
          "end":{
             "col":60,
             "line":164,
             "offset":3979
          },
          "extra":{
             "engine_kind":"OSS",
             "fingerprint":"4e8c55081c935f3d898a8798557667fa01ad901cf7602ce0db4509e28f9eacd5de06e359a51bb45f88dd28e9ec8dce535bd81515165a2483222316c8f199adba_0",
             "is_ignored":false,
             "lines":"        assert flask.render_template_string(\"{{ g.spam }}\") == \"eggs\"",
             "message":"Found a template created with string formatting. This is susceptible to server-side template injection and cross-site scripting attacks.",
             "metadata":{
                "category":"security",
                "confidence":"LOW",
                "cwe":[
                   "CWE-96: Improper Neutralization of Directives in Statically Saved Code ('Static Code Injection')"
                ],
                "impact":"MEDIUM",
                "license":"Commons Clause License Condition v1.0[LGPL-2.1-only]",
                "likelihood":"LOW",
                "owasp":[
                   "A03:2021 - Injection"
                ],
                "references":[
                   "https://nvisium.com/blog/2016/03/09/exploring-ssti-in-flask-jinja2.html"
                ],
                "semgrep.dev":{
                   "rule":{
                      "origin":"community",
                      "rule_id":"5rUOv1",
                      "url":"https://semgrep.dev/playground/r/o5T571/python.flask.security.audit.render-template-string.render-template-string",
                      "version_id":"o5T571"
                   }
                },
                "shortlink":"https://sg.run/8yjE",
                "source":"https://semgrep.dev/r/python.flask.security.audit.render-template-string.render-template-string",
                "subcategory":[
                   "audit"
                ],
                "technology":[
                   "flask"
                ]
             },
             "metavars":{
                
             },
             "severity":"WARNING"
          },
          "path":"/tmp/b7e98c65-5d2f-4fba-9d06-485708620d5c/tests/test_appctx.py",
          "start":{
             "col":16,
             "line":164,
             "offset":3935
          }
       },
       {
          "check_id":"python.flask.security.audit.render-template-string.render-template-string",
          "end":{
             "col":6,
             "line":635,
             "offset":17718
          },
          "extra":{
             "engine_kind":"OSS",
             "fingerprint":"f4de7babe50ed60411251969ae96402a098bb490a3973112895b576c49b4a02188bb798766dbd92ec983c22419278d0bd3a8dfb13c5ff7de05cac269693e25f7_0",
             "is_ignored":false,
             "lines":"    template_string = lambda: flask.render_template_string(  # noqa: E731\n        \"{% if notanswer %}{{ notanswer }} is not the answer. {% endif %}\"\n        \"{% if answer %}{{ answer }} is the answer.{% endif %}\"\n    )",
             "message":"Found a template created with string formatting. This is susceptible to server-side template injection and cross-site scripting attacks.",
             "metadata":{
                "category":"security",
                "confidence":"LOW",
                "cwe":[
                   "CWE-96: Improper Neutralization of Directives in Statically Saved Code ('Static Code Injection')"
                ],
                "impact":"MEDIUM",
                "license":"Commons Clause License Condition v1.0[LGPL-2.1-only]",
                "likelihood":"LOW",
                "owasp":[
                   "A03:2021 - Injection"
                ],
                "references":[
                   "https://nvisium.com/blog/2016/03/09/exploring-ssti-in-flask-jinja2.html"
                ],
                "semgrep.dev":{
                   "rule":{
                      "origin":"community",
                      "rule_id":"5rUOv1",
                      "url":"https://semgrep.dev/playground/r/o5T571/python.flask.security.audit.render-template-string.render-template-string",
                      "version_id":"o5T571"
                   }
                },
                "shortlink":"https://sg.run/8yjE",
                "source":"https://semgrep.dev/r/python.flask.security.audit.render-template-string.render-template-string",
                "subcategory":[
                   "audit"
                ],
                "technology":[
                   "flask"
                ]
             },
             "metavars":{
                
             },
             "severity":"WARNING"
          },
          "path":"/tmp/b7e98c65-5d2f-4fba-9d06-485708620d5c/tests/test_blueprints.py",
          "start":{
             "col":31,
             "line":632,
             "offset":17530
          }
       },
       {
          "check_id":"python.flask.security.audit.render-template-string.render-template-string",
          "end":{
             "col":64,
             "line":686,
             "offset":19079
          },
          "extra":{
             "engine_kind":"OSS",
             "fingerprint":"f4de7babe50ed60411251969ae96402a098bb490a3973112895b576c49b4a02188bb798766dbd92ec983c22419278d0bd3a8dfb13c5ff7de05cac269693e25f7_1",
             "is_ignored":false,
             "lines":"        rv = flask.render_template_string(\"{{ get_answer() }}\")",
             "message":"Found a template created with string formatting. This is susceptible to server-side template injection and cross-site scripting attacks.",
             "metadata":{
                "category":"security",
                "confidence":"LOW",
                "cwe":[
                   "CWE-96: Improper Neutralization of Directives in Statically Saved Code ('Static Code Injection')"
                ],
                "impact":"MEDIUM",
                "license":"Commons Clause License Condition v1.0[LGPL-2.1-only]",
                "likelihood":"LOW",
                "owasp":[
                   "A03:2021 - Injection"
                ],
                "references":[
                   "https://nvisium.com/blog/2016/03/09/exploring-ssti-in-flask-jinja2.html"
                ],
                "semgrep.dev":{
                   "rule":{
                      "origin":"community",
                      "rule_id":"5rUOv1",
                      "url":"https://semgrep.dev/playground/r/o5T571/python.flask.security.audit.render-template-string.render-template-string",
                      "version_id":"o5T571"
                   }
                },
                "shortlink":"https://sg.run/8yjE",
                "source":"https://semgrep.dev/r/python.flask.security.audit.render-template-string.render-template-string",
                "subcategory":[
                   "audit"
                ],
                "technology":[
                   "flask"
                ]
             },
             "metavars":{
                
             },
             "severity":"WARNING"
          },
          "path":"/tmp/b7e98c65-5d2f-4fba-9d06-485708620d5c/tests/test_blueprints.py",
          "start":{
             "col":14,
             "line":686,
             "offset":19029
          }
       },
       {
          "check_id":"python.flask.security.audit.render-template-string.render-template-string",
          "end":{
             "col":57,
             "line":906,
             "offset":24706
          },
          "extra":{
             "engine_kind":"OSS",
             "fingerprint":"f4de7babe50ed60411251969ae96402a098bb490a3973112895b576c49b4a02188bb798766dbd92ec983c22419278d0bd3a8dfb13c5ff7de05cac269693e25f7_2",
             "is_ignored":false,
             "lines":"        return flask.render_template_string(\"{{ key }}\")",
             "message":"Found a template created with string formatting. This is susceptible to server-side template injection and cross-site scripting attacks.",
             "metadata":{
                "category":"security",
                "confidence":"LOW",
                "cwe":[
                   "CWE-96: Improper Neutralization of Directives in Statically Saved Code ('Static Code Injection')"
                ],
                "impact":"MEDIUM",
                "license":"Commons Clause License Condition v1.0[LGPL-2.1-only]",
                "likelihood":"LOW",
                "owasp":[
                   "A03:2021 - Injection"
                ],
                "references":[
                   "https://nvisium.com/blog/2016/03/09/exploring-ssti-in-flask-jinja2.html"
                ],
                "semgrep.dev":{
                   "rule":{
                      "origin":"community",
                      "rule_id":"5rUOv1",
                      "url":"https://semgrep.dev/playground/r/o5T571/python.flask.security.audit.render-template-string.render-template-string",
                      "version_id":"o5T571"
                   }
                },
                "shortlink":"https://sg.run/8yjE",
                "source":"https://semgrep.dev/r/python.flask.security.audit.render-template-string.render-template-string",
                "subcategory":[
                   "audit"
                ],
                "technology":[
                   "flask"
                ]
             },
             "metavars":{
                
             },
             "severity":"WARNING"
          },
          "path":"/tmp/b7e98c65-5d2f-4fba-9d06-485708620d5c/tests/test_blueprints.py",
          "start":{
             "col":16,
             "line":906,
             "offset":24665
          }
       },
       {
          "check_id":"python.flask.security.audit.render-template-string.render-template-string",
          "end":{
             "col":6,
             "line":216,
             "offset":5733
          },
          "extra":{
             "engine_kind":"OSS",
             "fingerprint":"193cf022ccc82429fce48eaf62858c332a768108c6cc9fb4da74614e17c506a120898de34d427b2cd0920f550a8d0b16038b193c7281c0d5a48fab79ecced93a_0",
             "is_ignored":false,
             "lines":"    rv = flask.render_template_string(\n        \"const data = {{ data|tojson }};\",\n        data={\"name\": \"</script>\", \"time\": datetime.datetime(2021, 2, 1, 7, 15)},\n    )",
             "message":"Found a template created with string formatting. This is susceptible to server-side template injection and cross-site scripting attacks.",
             "metadata":{
                "category":"security",
                "confidence":"LOW",
                "cwe":[
                   "CWE-96: Improper Neutralization of Directives in Statically Saved Code ('Static Code Injection')"
                ],
                "impact":"MEDIUM",
                "license":"Commons Clause License Condition v1.0[LGPL-2.1-only]",
                "likelihood":"LOW",
                "owasp":[
                   "A03:2021 - Injection"
                ],
                "references":[
                   "https://nvisium.com/blog/2016/03/09/exploring-ssti-in-flask-jinja2.html"
                ],
                "semgrep.dev":{
                   "rule":{
                      "origin":"community",
                      "rule_id":"5rUOv1",
                      "url":"https://semgrep.dev/playground/r/o5T571/python.flask.security.audit.render-template-string.render-template-string",
                      "version_id":"o5T571"
                   }
                },
                "shortlink":"https://sg.run/8yjE",
                "source":"https://semgrep.dev/r/python.flask.security.audit.render-template-string.render-template-string",
                "subcategory":[
                   "audit"
                ],
                "technology":[
                   "flask"
                ]
             },
             "metavars":{
                
             },
             "severity":"WARNING"
          },
          "path":"/tmp/b7e98c65-5d2f-4fba-9d06-485708620d5c/tests/test_json.py",
          "start":{
             "col":10,
             "line":213,
             "offset":5573
          }
       },
       {
          "check_id":"python.flask.security.audit.render-template-string.render-template-string",
          "end":{
             "col":71,
             "line":27,
             "offset":587
          },
          "extra":{
             "engine_kind":"OSS",
             "fingerprint":"544eaf51b055afaf3c085b77f8407bfeef64a6eecf8c913940988fe15a5f939ce6792054edfc4525b3007486908b7fea42c20d6993770d2575b9b77469ea640e_0",
             "is_ignored":false,
             "lines":"        return flask.render_template_string(\"{{ config }}\", config=42)",
             "message":"Found a template created with string formatting. This is susceptible to server-side template injection and cross-site scripting attacks.",
             "metadata":{
                "category":"security",
                "confidence":"LOW",
                "cwe":[
                   "CWE-96: Improper Neutralization of Directives in Statically Saved Code ('Static Code Injection')"
                ],
                "impact":"MEDIUM",
                "license":"Commons Clause License Condition v1.0[LGPL-2.1-only]",
                "likelihood":"LOW",
                "owasp":[
                   "A03:2021 - Injection"
                ],
                "references":[
                   "https://nvisium.com/blog/2016/03/09/exploring-ssti-in-flask-jinja2.html"
                ],
                "semgrep.dev":{
                   "rule":{
                      "origin":"community",
                      "rule_id":"5rUOv1",
                      "url":"https://semgrep.dev/playground/r/o5T571/python.flask.security.audit.render-template-string.render-template-string",
                      "version_id":"o5T571"
                   }
                },
                "shortlink":"https://sg.run/8yjE",
                "source":"https://semgrep.dev/r/python.flask.security.audit.render-template-string.render-template-string",
                "subcategory":[
                   "audit"
                ],
                "technology":[
                   "flask"
                ]
             },
             "metavars":{
                
             },
             "severity":"WARNING"
          },
          "path":"/tmp/b7e98c65-5d2f-4fba-9d06-485708620d5c/tests/test_templating.py",
          "start":{
             "col":16,
             "line":27,
             "offset":532
          }
       },
       {
          "check_id":"python.flask.security.audit.render-template-string.render-template-string",
          "end":{
             "col":81,
             "line":49,
             "offset":1105
          },
          "extra":{
             "engine_kind":"OSS",
             "fingerprint":"544eaf51b055afaf3c085b77f8407bfeef64a6eecf8c913940988fe15a5f939ce6792054edfc4525b3007486908b7fea42c20d6993770d2575b9b77469ea640e_1",
             "is_ignored":false,
             "lines":"    rv = flask.render_template_string(\"Hello {{ config.WORLD_NAME }} {{ foo }}\")",
             "message":"Found a template created with string formatting. This is susceptible to server-side template injection and cross-site scripting attacks.",
             "metadata":{
                "category":"security",
                "confidence":"LOW",
                "cwe":[
                   "CWE-96: Improper Neutralization of Directives in Statically Saved Code ('Static Code Injection')"
                ],
                "impact":"MEDIUM",
                "license":"Commons Clause License Condition v1.0[LGPL-2.1-only]",
                "likelihood":"LOW",
                "owasp":[
                   "A03:2021 - Injection"
                ],
                "references":[
                   "https://nvisium.com/blog/2016/03/09/exploring-ssti-in-flask-jinja2.html"
                ],
                "semgrep.dev":{
                   "rule":{
                      "origin":"community",
                      "rule_id":"5rUOv1",
                      "url":"https://semgrep.dev/playground/r/o5T571/python.flask.security.audit.render-template-string.render-template-string",
                      "version_id":"o5T571"
                   }
                },
                "shortlink":"https://sg.run/8yjE",
                "source":"https://semgrep.dev/r/python.flask.security.audit.render-template-string.render-template-string",
                "subcategory":[
                   "audit"
                ],
                "technology":[
                   "flask"
                ]
             },
             "metavars":{
                
             },
             "severity":"WARNING"
          },
          "path":"/tmp/b7e98c65-5d2f-4fba-9d06-485708620d5c/tests/test_templating.py",
          "start":{
             "col":10,
             "line":49,
             "offset":1034
          }
       },
       {
          "check_id":"python.flask.security.audit.render-template-string.render-template-string",
          "end":{
             "col":10,
             "line":65,
             "offset":1493
          },
          "extra":{
             "engine_kind":"OSS",
             "fingerprint":"544eaf51b055afaf3c085b77f8407bfeef64a6eecf8c913940988fe15a5f939ce6792054edfc4525b3007486908b7fea42c20d6993770d2575b9b77469ea640e_2",
             "is_ignored":false,
             "lines":"        return flask.render_template_string(\n            \"\"\"\n            {{ request.args.foo }}\n            {{ g.foo }}\n            {{ config.DEBUG }}\n            {{ session.test }}\n        \"\"\"\n        )",
             "message":"Found a template created with string formatting. This is susceptible to server-side template injection and cross-site scripting attacks.",
             "metadata":{
                "category":"security",
                "confidence":"LOW",
                "cwe":[
                   "CWE-96: Improper Neutralization of Directives in Statically Saved Code ('Static Code Injection')"
                ],
                "impact":"MEDIUM",
                "license":"Commons Clause License Condition v1.0[LGPL-2.1-only]",
                "likelihood":"LOW",
                "owasp":[
                   "A03:2021 - Injection"
                ],
                "references":[
                   "https://nvisium.com/blog/2016/03/09/exploring-ssti-in-flask-jinja2.html"
                ],
                "semgrep.dev":{
                   "rule":{
                      "origin":"community",
                      "rule_id":"5rUOv1",
                      "url":"https://semgrep.dev/playground/r/o5T571/python.flask.security.audit.render-template-string.render-template-string",
                      "version_id":"o5T571"
                   }
                },
                "shortlink":"https://sg.run/8yjE",
                "source":"https://semgrep.dev/r/python.flask.security.audit.render-template-string.render-template-string",
                "subcategory":[
                   "audit"
                ],
                "technology":[
                   "flask"
                ]
             },
             "metavars":{
                
             },
             "severity":"WARNING"
          },
          "path":"/tmp/b7e98c65-5d2f-4fba-9d06-485708620d5c/tests/test_templating.py",
          "start":{
             "col":16,
             "line":58,
             "offset":1305
          }
       },
       {
          "check_id":"python.flask.security.audit.render-template-string.render-template-string",
          "end":{
             "col":67,
             "line":114,
             "offset":2723
          },
          "extra":{
             "engine_kind":"OSS",
             "fingerprint":"544eaf51b055afaf3c085b77f8407bfeef64a6eecf8c913940988fe15a5f939ce6792054edfc4525b3007486908b7fea42c20d6993770d2575b9b77469ea640e_3",
             "is_ignored":false,
             "lines":"    assert flask.render_template_string(\"{{ foo }}\", foo=\"<test>\") == \"&lt;test&gt;\"",
             "message":"Found a template created with string formatting. This is susceptible to server-side template injection and cross-site scripting attacks.",
             "metadata":{
                "category":"security",
                "confidence":"LOW",
                "cwe":[
                   "CWE-96: Improper Neutralization of Directives in Statically Saved Code ('Static Code Injection')"
                ],
                "impact":"MEDIUM",
                "license":"Commons Clause License Condition v1.0[LGPL-2.1-only]",
                "likelihood":"LOW",
                "owasp":[
                   "A03:2021 - Injection"
                ],
                "references":[
                   "https://nvisium.com/blog/2016/03/09/exploring-ssti-in-flask-jinja2.html"
                ],
                "semgrep.dev":{
                   "rule":{
                      "origin":"community",
                      "rule_id":"5rUOv1",
                      "url":"https://semgrep.dev/playground/r/o5T571/python.flask.security.audit.render-template-string.render-template-string",
                      "version_id":"o5T571"
                   }
                },
                "shortlink":"https://sg.run/8yjE",
                "source":"https://semgrep.dev/r/python.flask.security.audit.render-template-string.render-template-string",
                "subcategory":[
                   "audit"
                ],
                "technology":[
                   "flask"
                ]
             },
             "metavars":{
                
             },
             "severity":"WARNING"
          },
          "path":"/tmp/b7e98c65-5d2f-4fba-9d06-485708620d5c/tests/test_templating.py",
          "start":{
             "col":12,
             "line":114,
             "offset":2668
          }
       },
       {
          "check_id":"python.flask.security.audit.render-template-string.render-template-string",
          "end":{
             "col":59,
             "line":320,
             "offset":8281
          },
          "extra":{
             "engine_kind":"OSS",
             "fingerprint":"544eaf51b055afaf3c085b77f8407bfeef64a6eecf8c913940988fe15a5f939ce6792054edfc4525b3007486908b7fea42c20d6993770d2575b9b77469ea640e_4",
             "is_ignored":false,
             "lines":"    rv = flask.render_template_string(\"{{ get_stuff() }}\")",
             "message":"Found a template created with string formatting. This is susceptible to server-side template injection and cross-site scripting attacks.",
             "metadata":{
                "category":"security",
                "confidence":"LOW",
                "cwe":[
                   "CWE-96: Improper Neutralization of Directives in Statically Saved Code ('Static Code Injection')"
                ],
                "impact":"MEDIUM",
                "license":"Commons Clause License Condition v1.0[LGPL-2.1-only]",
                "likelihood":"LOW",
                "owasp":[
                   "A03:2021 - Injection"
                ],
                "references":[
                   "https://nvisium.com/blog/2016/03/09/exploring-ssti-in-flask-jinja2.html"
                ],
                "semgrep.dev":{
                   "rule":{
                      "origin":"community",
                      "rule_id":"5rUOv1",
                      "url":"https://semgrep.dev/playground/r/o5T571/python.flask.security.audit.render-template-string.render-template-string",
                      "version_id":"o5T571"
                   }
                },
                "shortlink":"https://sg.run/8yjE",
                "source":"https://semgrep.dev/r/python.flask.security.audit.render-template-string.render-template-string",
                "subcategory":[
                   "audit"
                ],
                "technology":[
                   "flask"
                ]
             },
             "metavars":{
                
             },
             "severity":"WARNING"
          },
          "path":"/tmp/b7e98c65-5d2f-4fba-9d06-485708620d5c/tests/test_templating.py",
          "start":{
             "col":10,
             "line":320,
             "offset":8232
          }
       },
       {
          "check_id":"python.flask.security.audit.xss.make-response-with-unknown-content.make-response-with-unknown-content",
          "end":{
             "col":49,
             "line":1277,
             "offset":33710
          },
          "extra":{
             "engine_kind":"OSS",
             "fingerprint":"c7acc9d88bd6337ca095f4c57e4d4435a1a794779bdd57f39f7daa9a75cc6a5b13918f114509f34588ad04e3c10115a41fabe44c72119592db8f6b1a7b53d863_0",
             "is_ignored":false,
             "lines":"    rv = flask.make_response(c for c in \"Hello\")",
             "message":"Be careful with `flask.make_response()`. If this response is rendered onto a webpage, this could create a cross-site scripting (XSS) vulnerability. `flask.make_response()` will not autoescape HTML. If you are rendering HTML, write your HTML in a template file and use `flask.render_template()` which will take care of escaping. If you are returning data from an API, consider using `flask.jsonify()`.",
             "metadata":{
                "category":"security",
                "confidence":"LOW",
                "cwe":[
                   "CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"
                ],
                "cwe2021-top25":true,
                "cwe2022-top25":true,
                "impact":"MEDIUM",
                "license":"Commons Clause License Condition v1.0[LGPL-2.1-only]",
                "likelihood":"LOW",
                "owasp":[
                   "A07:2017 - Cross-Site Scripting (XSS)",
                   "A03:2021 - Injection"
                ],
                "references":[
                   "https://github.com/python-security/pyt//blob/093a077bcf12d1f58ddeb2d73ddc096623985fb0/examples/vulnerable_code/XSS_assign_to_other_var.py#L11",
                   "https://flask.palletsprojects.com/en/1.1.x/api/#flask.Flask.make_response",
                   "https://flask.palletsprojects.com/en/1.1.x/api/#response-objects"
                ],
                "semgrep.dev":{
                   "rule":{
                      "origin":"community",
                      "rule_id":"AbUz6A",
                      "url":"https://semgrep.dev/playground/r/2KT6Dq/python.flask.security.audit.xss.make-response-with-unknown-content.make-response-with-unknown-content",
                      "version_id":"2KT6Dq"
                   }
                },
                "shortlink":"https://sg.run/3x3p",
                "source":"https://semgrep.dev/r/python.flask.security.audit.xss.make-response-with-unknown-content.make-response-with-unknown-content",
                "subcategory":[
                   "audit"
                ],
                "technology":[
                   "flask"
                ]
             },
             "metavars":{
                
             },
             "severity":"WARNING"
          },
          "path":"/tmp/b7e98c65-5d2f-4fba-9d06-485708620d5c/tests/test_basic.py",
          "start":{
             "col":10,
             "line":1277,
             "offset":33671
          }
       },
       {
          "check_id":"python.flask.security.audit.xss.make-response-with-unknown-content.make-response-with-unknown-content",
          "end":{
             "col":54,
             "line":1289,
             "offset":34116
          },
          "extra":{
             "engine_kind":"OSS",
             "fingerprint":"c7acc9d88bd6337ca095f4c57e4d4435a1a794779bdd57f39f7daa9a75cc6a5b13918f114509f34588ad04e3c10115a41fabe44c72119592db8f6b1a7b53d863_1",
             "is_ignored":false,
             "lines":"    rv = flask.make_response(flask.Response(\"\"), 400)",
             "message":"Be careful with `flask.make_response()`. If this response is rendered onto a webpage, this could create a cross-site scripting (XSS) vulnerability. `flask.make_response()` will not autoescape HTML. If you are rendering HTML, write your HTML in a template file and use `flask.render_template()` which will take care of escaping. If you are returning data from an API, consider using `flask.jsonify()`.",
             "metadata":{
                "category":"security",
                "confidence":"LOW",
                "cwe":[
                   "CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"
                ],
                "cwe2021-top25":true,
                "cwe2022-top25":true,
                "impact":"MEDIUM",
                "license":"Commons Clause License Condition v1.0[LGPL-2.1-only]",
                "likelihood":"LOW",
                "owasp":[
                   "A07:2017 - Cross-Site Scripting (XSS)",
                   "A03:2021 - Injection"
                ],
                "references":[
                   "https://github.com/python-security/pyt//blob/093a077bcf12d1f58ddeb2d73ddc096623985fb0/examples/vulnerable_code/XSS_assign_to_other_var.py#L11",
                   "https://flask.palletsprojects.com/en/1.1.x/api/#flask.Flask.make_response",
                   "https://flask.palletsprojects.com/en/1.1.x/api/#response-objects"
                ],
                "semgrep.dev":{
                   "rule":{
                      "origin":"community",
                      "rule_id":"AbUz6A",
                      "url":"https://semgrep.dev/playground/r/2KT6Dq/python.flask.security.audit.xss.make-response-with-unknown-content.make-response-with-unknown-content",
                      "version_id":"2KT6Dq"
                   }
                },
                "shortlink":"https://sg.run/3x3p",
                "source":"https://semgrep.dev/r/python.flask.security.audit.xss.make-response-with-unknown-content.make-response-with-unknown-content",
                "subcategory":[
                   "audit"
                ],
                "technology":[
                   "flask"
                ]
             },
             "metavars":{
                
             },
             "severity":"WARNING"
          },
          "path":"/tmp/b7e98c65-5d2f-4fba-9d06-485708620d5c/tests/test_basic.py",
          "start":{
             "col":10,
             "line":1289,
             "offset":34072
          }
       },
       {
          "check_id":"python.flask.security.audit.xss.make-response-with-unknown-content.make-response-with-unknown-content",
          "end":{
             "col":6,
             "line":1298,
             "offset":34358
          },
          "extra":{
             "engine_kind":"OSS",
             "fingerprint":"c7acc9d88bd6337ca095f4c57e4d4435a1a794779bdd57f39f7daa9a75cc6a5b13918f114509f34588ad04e3c10115a41fabe44c72119592db8f6b1a7b53d863_2",
             "is_ignored":false,
             "lines":"    rv = flask.make_response(\n        flask.Response(\"\", headers={\"Content-Type\": \"text/html\"}),\n        400,\n        [(\"X-Foo\", \"bar\")],\n    )",
             "message":"Be careful with `flask.make_response()`. If this response is rendered onto a webpage, this could create a cross-site scripting (XSS) vulnerability. `flask.make_response()` will not autoescape HTML. If you are rendering HTML, write your HTML in a template file and use `flask.render_template()` which will take care of escaping. If you are returning data from an API, consider using `flask.jsonify()`.",
             "metadata":{
                "category":"security",
                "confidence":"LOW",
                "cwe":[
                   "CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"
                ],
                "cwe2021-top25":true,
                "cwe2022-top25":true,
                "impact":"MEDIUM",
                "license":"Commons Clause License Condition v1.0[LGPL-2.1-only]",
                "likelihood":"LOW",
                "owasp":[
                   "A07:2017 - Cross-Site Scripting (XSS)",
                   "A03:2021 - Injection"
                ],
                "references":[
                   "https://github.com/python-security/pyt//blob/093a077bcf12d1f58ddeb2d73ddc096623985fb0/examples/vulnerable_code/XSS_assign_to_other_var.py#L11",
                   "https://flask.palletsprojects.com/en/1.1.x/api/#flask.Flask.make_response",
                   "https://flask.palletsprojects.com/en/1.1.x/api/#response-objects"
                ],
                "semgrep.dev":{
                   "rule":{
                      "origin":"community",
                      "rule_id":"AbUz6A",
                      "url":"https://semgrep.dev/playground/r/2KT6Dq/python.flask.security.audit.xss.make-response-with-unknown-content.make-response-with-unknown-content",
                      "version_id":"2KT6Dq"
                   }
                },
                "shortlink":"https://sg.run/3x3p",
                "source":"https://semgrep.dev/r/python.flask.security.audit.xss.make-response-with-unknown-content.make-response-with-unknown-content",
                "subcategory":[
                   "audit"
                ],
                "technology":[
                   "flask"
                ]
             },
             "metavars":{
                
             },
             "severity":"WARNING"
          },
          "path":"/tmp/b7e98c65-5d2f-4fba-9d06-485708620d5c/tests/test_basic.py",
          "start":{
             "col":10,
             "line":1294,
             "offset":34224
          }
       },
       {
          "check_id":"python.flask.security.audit.xss.make-response-with-unknown-content.make-response-with-unknown-content",
          "end":{
             "col":59,
             "line":83,
             "offset":1967
          },
          "extra":{
             "engine_kind":"OSS",
             "fingerprint":"9132926813c000397228de882e987711886a68302176e6d165269186756287666fe1e90cda5fb5609c7c667b5d7d9743fb5e94a05ce3214804a29ecaf6f8e6b2_0",
             "is_ignored":false,
             "lines":"            resp = flask.make_response(f(*args, **kwargs))",
             "message":"Be careful with `flask.make_response()`. If this response is rendered onto a webpage, this could create a cross-site scripting (XSS) vulnerability. `flask.make_response()` will not autoescape HTML. If you are rendering HTML, write your HTML in a template file and use `flask.render_template()` which will take care of escaping. If you are returning data from an API, consider using `flask.jsonify()`.",
             "metadata":{
                "category":"security",
                "confidence":"LOW",
                "cwe":[
                   "CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"
                ],
                "cwe2021-top25":true,
                "cwe2022-top25":true,
                "impact":"MEDIUM",
                "license":"Commons Clause License Condition v1.0[LGPL-2.1-only]",
                "likelihood":"LOW",
                "owasp":[
                   "A07:2017 - Cross-Site Scripting (XSS)",
                   "A03:2021 - Injection"
                ],
                "references":[
                   "https://github.com/python-security/pyt//blob/093a077bcf12d1f58ddeb2d73ddc096623985fb0/examples/vulnerable_code/XSS_assign_to_other_var.py#L11",
                   "https://flask.palletsprojects.com/en/1.1.x/api/#flask.Flask.make_response",
                   "https://flask.palletsprojects.com/en/1.1.x/api/#response-objects"
                ],
                "semgrep.dev":{
                   "rule":{
                      "origin":"community",
                      "rule_id":"AbUz6A",
                      "url":"https://semgrep.dev/playground/r/2KT6Dq/python.flask.security.audit.xss.make-response-with-unknown-content.make-response-with-unknown-content",
                      "version_id":"2KT6Dq"
                   }
                },
                "shortlink":"https://sg.run/3x3p",
                "source":"https://semgrep.dev/r/python.flask.security.audit.xss.make-response-with-unknown-content.make-response-with-unknown-content",
                "subcategory":[
                   "audit"
                ],
                "technology":[
                   "flask"
                ]
             },
             "metavars":{
                
             },
             "severity":"WARNING"
          },
          "path":"/tmp/b7e98c65-5d2f-4fba-9d06-485708620d5c/tests/test_views.py",
          "start":{
             "col":20,
             "line":83,
             "offset":1928
          }
       },
       {
          "check_id":"python.flask.security.audit.debug-enabled.debug-enabled",
          "end":{
             "col":40,
             "line":1848,
             "offset":50584
          },
          "extra":{
             "engine_kind":"OSS",
             "fingerprint":"d05e0d094fb19d7128f46fd884b1a8bf49efa4cbb460fc34d7930280739600dbf0c7e53a74ef28c88208844a3efb1c2f9bc6baa339c5601e3518af419f73daf7_0",
             "is_ignored":false,
             "lines":"    app.run(hostname, port, debug=True)",
             "message":"Detected Flask app with debug=True. Do not deploy to production with this flag enabled as it will leak sensitive information. Instead, consider using Flask configuration variables or setting 'debug' using system environment variables.",
             "metadata":{
                "category":"security",
                "confidence":"HIGH",
                "cwe":[
                   "CWE-489: Active Debug Code"
                ],
                "impact":"MEDIUM",
                "license":"Commons Clause License Condition v1.0[LGPL-2.1-only]",
                "likelihood":"HIGH",
                "owasp":"A06:2017 - Security Misconfiguration",
                "references":[
                   "https://labs.detectify.com/2015/10/02/how-patreon-got-hacked-publicly-exposed-werkzeug-debugger/"
                ],
                "semgrep.dev":{
                   "rule":{
                      "origin":"community",
                      "rule_id":"gxU1bd",
                      "url":"https://semgrep.dev/playground/r/qkTPK2/python.flask.security.audit.debug-enabled.debug-enabled",
                      "version_id":"qkTPK2"
                   }
                },
                "shortlink":"https://sg.run/dKrd",
                "source":"https://semgrep.dev/r/python.flask.security.audit.debug-enabled.debug-enabled",
                "subcategory":[
                   "vuln"
                ],
                "technology":[
                   "flask"
                ]
             },
             "metavars":{
                "$APP":{
                   "abstract_content":"app",
                   "end":{
                      "col":8,
                      "line":1848,
                      "offset":50552
                   },
                   "start":{
                      "col":5,
                      "line":1848,
                      "offset":50549
                   }
                }
             },
             "severity":"WARNING"
          },
          "path":"/tmp/b7e98c65-5d2f-4fba-9d06-485708620d5c/tests/test_basic.py",
          "start":{
             "col":5,
             "line":1848,
             "offset":50549
          }
       },
       {
          "check_id":"python.flask.security.audit.debug-enabled.debug-enabled",
          "end":{
             "col":24,
             "line":403,
             "offset":10738
          },
          "extra":{
             "engine_kind":"OSS",
             "fingerprint":"c55521f0b0c97e6b3c980f019af93db69d2e34e84924b8f44dc053633373488a1a2d869eaf814cea2583e4a9521f6f356b9dee4cfd98ffdcf000f08a4b495f65_0",
             "is_ignored":false,
             "lines":"    app.run(debug=True)",
             "message":"Detected Flask app with debug=True. Do not deploy to production with this flag enabled as it will leak sensitive information. Instead, consider using Flask configuration variables or setting 'debug' using system environment variables.",
             "metadata":{
                "category":"security",
                "confidence":"HIGH",
                "cwe":[
                   "CWE-489: Active Debug Code"
                ],
                "impact":"MEDIUM",
                "license":"Commons Clause License Condition v1.0[LGPL-2.1-only]",
                "likelihood":"HIGH",
                "owasp":"A06:2017 - Security Misconfiguration",
                "references":[
                   "https://labs.detectify.com/2015/10/02/how-patreon-got-hacked-publicly-exposed-werkzeug-debugger/"
                ],
                "semgrep.dev":{
                   "rule":{
                      "origin":"community",
                      "rule_id":"gxU1bd",
                      "url":"https://semgrep.dev/playground/r/qkTPK2/python.flask.security.audit.debug-enabled.debug-enabled",
                      "version_id":"qkTPK2"
                   }
                },
                "shortlink":"https://sg.run/dKrd",
                "source":"https://semgrep.dev/r/python.flask.security.audit.debug-enabled.debug-enabled",
                "subcategory":[
                   "vuln"
                ],
                "technology":[
                   "flask"
                ]
             },
             "metavars":{
                "$APP":{
                   "abstract_content":"app",
                   "end":{
                      "col":8,
                      "line":403,
                      "offset":10722
                   },
                   "start":{
                      "col":5,
                      "line":403,
                      "offset":10719
                   }
                }
             },
             "severity":"WARNING"
          },
          "path":"/tmp/b7e98c65-5d2f-4fba-9d06-485708620d5c/tests/test_templating.py",
          "start":{
             "col":5,
             "line":403,
             "offset":10719
          }
       },
       {
          "check_id":"python.flask.security.audit.directly-returned-format-string.directly-returned-format-string",
          "end":{
             "col":35,
             "line":1756,
             "offset":47868
          },
          "extra":{
             "dataflow_trace":{
                "taint_sink":[
                   "CliLoc",
                   [
                      {
                         "end":{
                            "col":35,
                            "line":1756,
                            "offset":47868
                         },
                         "path":"/tmp/b7e98c65-5d2f-4fba-9d06-485708620d5c/tests/test_basic.py",
                         "start":{
                            "col":9,
                            "line":1756,
                            "offset":47842
                         }
                      },
                      "return f\"index for {user}\""
                   ]
                ],
                "taint_source":[
                   "CliLoc",
                   [
                      {
                         "end":{
                            "col":33,
                            "line":1756,
                            "offset":47866
                         },
                         "path":"/tmp/b7e98c65-5d2f-4fba-9d06-485708620d5c/tests/test_basic.py",
                         "start":{
                            "col":29,
                            "line":1756,
                            "offset":47862
                         }
                      },
                      "user"
                   ]
                ]
             },
             "engine_kind":"OSS",
             "fingerprint":"d6a01d54c5ef8161e1751f7ac22e1206a71177824f8d8d2aaa4862d7db8101bc5a017b4b696404112cb48f0ad00fc893db7af26be3433957e210faf078f509ed_0",
             "is_ignored":false,
             "lines":"        return f\"index for {user}\"",
             "message":"Detected Flask route directly returning a formatted string. This is subject to cross-site scripting if user input can reach the string. Consider using the template engine instead and rendering pages with 'render_template()'.",
             "metadata":{
                "category":"security",
                "confidence":"MEDIUM",
                "cwe":[
                   "CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"
                ],
                "cwe2021-top25":true,
                "cwe2022-top25":true,
                "impact":"MEDIUM",
                "license":"Commons Clause License Condition v1.0[LGPL-2.1-only]",
                "likelihood":"HIGH",
                "owasp":[
                   "A07:2017 - Cross-Site Scripting (XSS)",
                   "A03:2021 - Injection"
                ],
                "references":[
                   "https://owasp.org/Top10/A03_2021-Injection"
                ],
                "semgrep.dev":{
                   "rule":{
                      "origin":"community",
                      "rule_id":"QrUz49",
                      "url":"https://semgrep.dev/playground/r/YDT839/python.flask.security.audit.directly-returned-format-string.directly-returned-format-string",
                      "version_id":"YDT839"
                   }
                },
                "shortlink":"https://sg.run/Zv6o",
                "source":"https://semgrep.dev/r/python.flask.security.audit.directly-returned-format-string.directly-returned-format-string",
                "subcategory":[
                   "vuln"
                ],
                "technology":[
                   "flask"
                ]
             },
             "metavars":{
                "$APP":{
                   "abstract_content":"app",
                   "end":{
                      "col":9,
                      "line":1754,
                      "offset":47781
                   },
                   "start":{
                      "col":6,
                      "line":1754,
                      "offset":47778
                   }
                },
                "$FUNC":{
                   "abstract_content":"index",
                   "end":{
                      "col":14,
                      "line":1755,
                      "offset":47826
                   },
                   "start":{
                      "col":9,
                      "line":1755,
                      "offset":47821
                   }
                },
                "$PARAM":{
                   "abstract_content":"user",
                   "end":{
                      "col":33,
                      "line":1756,
                      "offset":47866
                   },
                   "start":{
                      "col":29,
                      "line":1756,
                      "offset":47862
                   }
                }
             },
             "severity":"WARNING"
          },
          "path":"/tmp/b7e98c65-5d2f-4fba-9d06-485708620d5c/tests/test_basic.py",
          "start":{
             "col":9,
             "line":1756,
             "offset":47842
          }
       },
       {
          "check_id":"python.flask.security.audit.directly-returned-format-string.directly-returned-format-string",
          "end":{
             "col":35,
             "line":1769,
             "offset":48272
          },
          "extra":{
             "dataflow_trace":{
                "taint_sink":[
                   "CliLoc",
                   [
                      {
                         "end":{
                            "col":35,
                            "line":1769,
                            "offset":48272
                         },
                         "path":"/tmp/b7e98c65-5d2f-4fba-9d06-485708620d5c/tests/test_basic.py",
                         "start":{
                            "col":9,
                            "line":1769,
                            "offset":48246
                         }
                      },
                      "return f\"index for {user}\""
                   ]
                ],
                "taint_source":[
                   "CliLoc",
                   [
                      {
                         "end":{
                            "col":33,
                            "line":1769,
                            "offset":48270
                         },
                         "path":"/tmp/b7e98c65-5d2f-4fba-9d06-485708620d5c/tests/test_basic.py",
                         "start":{
                            "col":29,
                            "line":1769,
                            "offset":48266
                         }
                      },
                      "user"
                   ]
                ]
             },
             "engine_kind":"OSS",
             "fingerprint":"d6a01d54c5ef8161e1751f7ac22e1206a71177824f8d8d2aaa4862d7db8101bc5a017b4b696404112cb48f0ad00fc893db7af26be3433957e210faf078f509ed_1",
             "is_ignored":false,
             "lines":"        return f\"index for {user}\"",
             "message":"Detected Flask route directly returning a formatted string. This is subject to cross-site scripting if user input can reach the string. Consider using the template engine instead and rendering pages with 'render_template()'.",
             "metadata":{
                "category":"security",
                "confidence":"MEDIUM",
                "cwe":[
                   "CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"
                ],
                "cwe2021-top25":true,
                "cwe2022-top25":true,
                "impact":"MEDIUM",
                "license":"Commons Clause License Condition v1.0[LGPL-2.1-only]",
                "likelihood":"HIGH",
                "owasp":[
                   "A07:2017 - Cross-Site Scripting (XSS)",
                   "A03:2021 - Injection"
                ],
                "references":[
                   "https://owasp.org/Top10/A03_2021-Injection"
                ],
                "semgrep.dev":{
                   "rule":{
                      "origin":"community",
                      "rule_id":"QrUz49",
                      "url":"https://semgrep.dev/playground/r/YDT839/python.flask.security.audit.directly-returned-format-string.directly-returned-format-string",
                      "version_id":"YDT839"
                   }
                },
                "shortlink":"https://sg.run/Zv6o",
                "source":"https://semgrep.dev/r/python.flask.security.audit.directly-returned-format-string.directly-returned-format-string",
                "subcategory":[
                   "vuln"
                ],
                "technology":[
                   "flask"
                ]
             },
             "metavars":{
                "$APP":{
                   "abstract_content":"app",
                   "end":{
                      "col":9,
                      "line":1767,
                      "offset":48185
                   },
                   "start":{
                      "col":6,
                      "line":1767,
                      "offset":48182
                   }
                },
                "$FUNC":{
                   "abstract_content":"index",
                   "end":{
                      "col":14,
                      "line":1768,
                      "offset":48230
                   },
                   "start":{
                      "col":9,
                      "line":1768,
                      "offset":48225
                   }
                },
                "$PARAM":{
                   "abstract_content":"user",
                   "end":{
                      "col":33,
                      "line":1769,
                      "offset":48270
                   },
                   "start":{
                      "col":29,
                      "line":1769,
                      "offset":48266
                   }
                }
             },
             "severity":"WARNING"
          },
          "path":"/tmp/b7e98c65-5d2f-4fba-9d06-485708620d5c/tests/test_basic.py",
          "start":{
             "col":9,
             "line":1769,
             "offset":48246
          }
       },
       {
          "check_id":"python.flask.security.audit.directly-returned-format-string.directly-returned-format-string",
          "end":{
             "col":32,
             "line":136,
             "offset":3651
          },
          "extra":{
             "dataflow_trace":{
                "taint_sink":[
                   "CliLoc",
                   [
                      {
                         "end":{
                            "col":32,
                            "line":136,
                            "offset":3651
                         },
                         "path":"/tmp/b7e98c65-5d2f-4fba-9d06-485708620d5c/tests/test_blueprints.py",
                         "start":{
                            "col":9,
                            "line":136,
                            "offset":3628
                         }
                      },
                      "return f\"{bar}/{baz:d}\""
                   ]
                ],
                "taint_source":[
                   "CliLoc",
                   [
                      {
                         "end":{
                            "col":22,
                            "line":136,
                            "offset":3641
                         },
                         "path":"/tmp/b7e98c65-5d2f-4fba-9d06-485708620d5c/tests/test_blueprints.py",
                         "start":{
                            "col":19,
                            "line":136,
                            "offset":3638
                         }
                      },
                      "bar"
                   ]
                ]
             },
             "engine_kind":"OSS",
             "fingerprint":"b7066ac925f9ee02f1d6161072bde1396d3197954ae4af726826671b53a4c36f1c6a41536543e2285547399c5a0af03ad1614fb464c29bb17e0199c7c5b3a5c3_0",
             "is_ignored":false,
             "lines":"        return f\"{bar}/{baz:d}\"",
             "message":"Detected Flask route directly returning a formatted string. This is subject to cross-site scripting if user input can reach the string. Consider using the template engine instead and rendering pages with 'render_template()'.",
             "metadata":{
                "category":"security",
                "confidence":"MEDIUM",
                "cwe":[
                   "CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"
                ],
                "cwe2021-top25":true,
                "cwe2022-top25":true,
                "impact":"MEDIUM",
                "license":"Commons Clause License Condition v1.0[LGPL-2.1-only]",
                "likelihood":"HIGH",
                "owasp":[
                   "A07:2017 - Cross-Site Scripting (XSS)",
                   "A03:2021 - Injection"
                ],
                "references":[
                   "https://owasp.org/Top10/A03_2021-Injection"
                ],
                "semgrep.dev":{
                   "rule":{
                      "origin":"community",
                      "rule_id":"QrUz49",
                      "url":"https://semgrep.dev/playground/r/YDT839/python.flask.security.audit.directly-returned-format-string.directly-returned-format-string",
                      "version_id":"YDT839"
                   }
                },
                "shortlink":"https://sg.run/Zv6o",
                "source":"https://semgrep.dev/r/python.flask.security.audit.directly-returned-format-string.directly-returned-format-string",
                "subcategory":[
                   "vuln"
                ],
                "technology":[
                   "flask"
                ]
             },
             "metavars":{
                "$APP":{
                   "abstract_content":"bp",
                   "end":{
                      "col":8,
                      "line":134,
                      "offset":3560
                   },
                   "start":{
                      "col":6,
                      "line":134,
                      "offset":3558
                   }
                },
                "$FUNC":{
                   "abstract_content":"foo",
                   "end":{
                      "col":12,
                      "line":135,
                      "offset":3608
                   },
                   "start":{
                      "col":9,
                      "line":135,
                      "offset":3605
                   }
                },
                "$PARAM":{
                   "abstract_content":"bar",
                   "end":{
                      "col":22,
                      "line":136,
                      "offset":3641
                   },
                   "start":{
                      "col":19,
                      "line":136,
                      "offset":3638
                   }
                }
             },
             "severity":"WARNING"
          },
          "path":"/tmp/b7e98c65-5d2f-4fba-9d06-485708620d5c/tests/test_blueprints.py",
          "start":{
             "col":9,
             "line":136,
             "offset":3628
          }
       },
       {
          "check_id":"python.lang.security.audit.non-literal-import.non-literal-import",
          "end":{
             "col":58,
             "line":871,
             "offset":33567
          },
          "extra":{
             "engine_kind":"OSS",
             "fingerprint":"33224e2bf36b1566510db639904837db836ff1d7facc9c12c1f8043288fd5627be72f11a0314bb610f9b64b7b94e66acc5146c0d8a68872dc753efbd6a063d09_0",
             "is_ignored":false,
             "lines":"        filename = importlib.import_module(root_mod_name).__file__",
             "message":"Untrusted user input in `importlib.import_module()` function allows an attacker to load arbitrary code. Avoid dynamic values in `importlib.import_module()` or use a whitelist to prevent running untrusted code.",
             "metadata":{
                "category":"security",
                "confidence":"LOW",
                "cwe":[
                   "CWE-706: Use of Incorrectly-Resolved Name or Reference"
                ],
                "impact":"MEDIUM",
                "license":"Commons Clause License Condition v1.0[LGPL-2.1-only]",
                "likelihood":"LOW",
                "owasp":[
                   "A01:2021 - Broken Access Control"
                ],
                "references":[
                   "https://owasp.org/Top10/A01_2021-Broken_Access_Control"
                ],
                "semgrep.dev":{
                   "rule":{
                      "origin":"community",
                      "rule_id":"AbUGN5",
                      "url":"https://semgrep.dev/playground/r/A8TnY4/python.lang.security.audit.non-literal-import.non-literal-import",
                      "version_id":"A8TnY4"
                   }
                },
                "shortlink":"https://sg.run/y6Jk",
                "source":"https://semgrep.dev/r/python.lang.security.audit.non-literal-import.non-literal-import",
                "subcategory":[
                   "audit"
                ],
                "technology":[
                   "python"
                ]
             },
             "metavars":{
                "$NAME":{
                   "abstract_content":"root_mod_name",
                   "end":{
                      "col":57,
                      "line":871,
                      "offset":33566
                   },
                   "start":{
                      "col":44,
                      "line":871,
                      "offset":33553
                   }
                }
             },
             "severity":"WARNING"
          },
          "path":"/tmp/b7e98c65-5d2f-4fba-9d06-485708620d5c/src/flask/scaffold.py",
          "start":{
             "col":20,
             "line":871,
             "offset":33529
          }
       }
    ],
    "version":"1.14.0"
 }